{
  "name": "3. N8N+Nano多模态聊天工作流",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1056,
        -64
      ],
      "id": "253b9c87-790c-40d5-8783-b3bbfb328c25",
      "name": "Telegram Trigger",
      "webhookId": "b55f56ab-b314-4a74-b295-143c4c1751a5"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=请分析以下用户请求，判断用户的意图：\n\n用户消息：\"{{ $json.message.text }}\"\n\n请按以下JSON格式回复：\n{\n  \"intent\": \"image_edit\" 或 \"image_generate\",\n  \"confidence\": 0-100之间的数字,\n  \"reasoning\": \"判断理由\",\n  \"requires_existing_image\": true或false,\n  \"suggested_response\": \"建议回复给用户的消息\"\n}\n\n判断规则：\n1. 如果用户提到\"把这个/这张/这辆...\"、\"将...改为...\"、\"修改...\"、\"编辑...\"、\"更改颜色\"、\"变成...\"等，通常需要一张现有图片进行编辑\n2. 如果用户说\"画一个...\"、\"生成...\"、\"创建...\"、\"我想要一张...图片\"等，通常是要从零生成图片\n3. 如果用户使用了指示代词（这个、这张、它）但没有上传图片，很可能需要图片编辑\n4. 考虑上下文语境，比如\"现在将颜色更改为黄色\"明显是在讨论已存在的物体\n\n示例分析：\n- \"把这辆车变成敞篷车\" → image_edit（指示代词\"这辆\"）\n- \"现在将颜色更改为黄色\" → image_edit（\"现在\"暗示正在修改某个现有物体）\n- \"画一只可爱的猫咪\" → image_generate（明确的生成请求）\n- \"生成一张海边日落的图片\" → image_generate（明确的生成请求）\n- \"让这只狗变成金毛\" → image_edit（指示代词\"这只\"）\n",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -800,
        -64
      ],
      "id": "1ea9d3da-b453-448f-9cff-ab1b6d2eb1b7",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -848,
        96
      ],
      "id": "11425fe6-0a66-4197-a81f-e53484e0d35a",
      "name": "DeepSeek Chat Model"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"intent\": \"image_edit或image_generate\",\n  \"confidence\": \"0-100之间的数字\",\n  \"reasoning\": \"判断理由\",\n  \"requires_existing_image\": \"true或false\",\n  \"suggested_response\": \"建议回复给用户的消息\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -656,
        96
      ],
      "id": "3109f612-3c5f-4be1-b00f-bb6f8fb2af1f",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "46fbc7ff-ab24-42a2-8177-4214c8064b28",
              "leftValue": "={{ $json.output.intent }}",
              "rightValue": "image_generate",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -496,
        -64
      ],
      "id": "f172f269-59ec-4310-844e-20aa4356a544",
      "name": "If"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openRouterApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"google/gemini-2.5-flash-image-preview:free\",\n  \"modalities\": [\"image\", \"text\"],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $('Telegram Trigger').item.json.message.text }}\"\n    }\n  ]\n} ",
        "options": {
          "response": {}
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -976,
        512
      ],
      "id": "681a567d-f926-4d6b-b2b4-2ff629a7a05f",
      "name": "HTTP Request",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1105fbcd-2732-427a-af96-8102d1d4ef91",
              "name": "base",
              "value": "={{ $json.choices[0].message.images[0].image_url.url.split(\",\")[1] }}",
              "type": "string"
            },
            {
              "id": "0a8c6ab4-a596-4eb5-a681-4a0a52c46863",
              "name": "mime",
              "value": "={{ $json.choices[0].message.images[0].image_url.url.match(/^data:([^;]+)/)[1] }}",
              "type": "string"
            },
            {
              "id": "39873dde-90e0-4868-91f3-cdc1762ec64f",
              "name": "data",
              "value": "={{ $json.choices[0].message.images[0].image_url.url}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -352,
        560
      ],
      "id": "84e993e1-1189-41fa-bdc3-bdb97fe0f5d4",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -80,
        560
      ],
      "id": "a6bfc7b7-0079-4f54-8022-3716bed7ca96",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "content": "## 生图",
        "height": 224,
        "width": 288,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1008,
        448
      ],
      "id": "6db9654c-2170-45aa-9748-d3023269e6a1",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "binaryData": true,
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        112,
        560
      ],
      "id": "5aa89e41-4233-4578-b949-86a1fe5d7dd4",
      "name": "Send a photo message",
      "webhookId": "6ed845f1-afd5-4603-9764-7fd6922285c5"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "message": "={{ $json.output.suggested_response }}",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "files",
              "fieldType": "file",
              "acceptFileTypes": ".jpg,.png,.jpeg"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -384,
        176
      ],
      "id": "66a4f28c-8191-4085-b646-be6655b2e619",
      "name": "Send a text message",
      "webhookId": "2a401a64-db70-4af3-9731-6b7ec062e652"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output.suggested_response }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -240,
        -128
      ],
      "id": "91a378c1-4201-46ed-8108-d87fb47270df",
      "name": "Send a text message1",
      "webhookId": "550ac7ee-1fcd-4841-aa58-aa556d2c96d5"
    },
    {
      "parameters": {
        "jsCode": "// 经典的分离多个二进制文件的方法\n// 这个代码会将一个包含多个二进制文件的item分离成多个item，每个item包含一个文件\n\nconst inputData = $input.all();\nconst results = [];\n\nfor (const inputItem of inputData) {\n  console.log('=== 处理输入项 ===');\n  \n  if (inputItem.binary && Object.keys(inputItem.binary).length > 0) {\n    // 遍历每个二进制字段\n    for (const [binaryKey, binaryData] of Object.entries(inputItem.binary)) {\n      console.log(`处理二进制字段: ${binaryKey}`);\n      \n      // 为每个二进制文件创建一个新的 item\n      const newItem = {\n        json: {\n          ...inputItem.json, // 保留原始 JSON 数据\n          originalBinaryKey: binaryKey, // 添加原始字段名信息\n          fileName: binaryData.fileName,\n          mimeType: binaryData.mimeType,\n          fileSize: binaryData.fileSize\n        },\n        binary: {\n          data: binaryData // 将当前二进制文件放到标准的 'data' 字段中\n        }\n      };\n      \n      results.push(newItem);\n      console.log(`✓ 创建新item: ${binaryData.fileName || binaryKey}`);\n    }\n  } else {\n    // 如果没有二进制数据，直接传递原始item\n    results.push(inputItem);\n  }\n}\n\nconsole.log(`总共创建了 ${results.length} 个输出项`);\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        176
      ],
      "id": "b3b2ca90-be7c-4fcd-93e3-af01e1d752b5",
      "name": "Code"
    },
    {
      "parameters": {
        "content": "## 修图",
        "height": 256,
        "width": 288,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1008,
        704
      ],
      "id": "9cdb8472-9616-4377-90a5-b7f5e8f4005f",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openRouterApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "response": {}
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -960,
        784
      ],
      "id": "0f5afeca-c6e9-4da5-953a-75df778e32f7",
      "name": "HTTP Request3",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -528,
        480
      ],
      "id": "c52d172c-a24b-49d4-ae17-8a1bd498960a",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "7354573803",
        "file": "={{ $json.data.video_url }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        32,
        1680
      ],
      "id": "93ea0d73-24a7-447c-81c0-c56796827952",
      "name": "Send a video",
      "webhookId": "8899927b-17aa-4e51-8e54-55cb81a3e540"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "message": "图片生成完成 - 是否生成视频？",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "是否生成视频？",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "生成视频"
                  },
                  {
                    "option": "跳过视频生成"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "视频描述",
              "fieldType": "textarea",
              "placeholder": "=描述您希望视频中发生的动作或变化，例如：\n- 猫咪慢慢转头看向镜头\n- 树叶在微风中轻轻摆动\n- 人物眨眼并微笑\n- 水面波纹轻柔荡漾"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -992,
        1104
      ],
      "id": "3c880256-fb68-424b-b0fd-4307ca61cb83",
      "name": "视频确认",
      "webhookId": "485a8347-e59b-4c53-81c1-8ff2191d9bd5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a8f1c3f7-2f31-4a1b-819a-4257f7384713",
              "leftValue": "={{ $json.data['是否生成视频？'] }}",
              "rightValue": "生成视频",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -800,
        1104
      ],
      "id": "4a13af78-1a73-4fc4-a8bc-0d26ca58964c",
      "name": "If1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -672,
        1280
      ],
      "id": "0bdcbaa1-fb23-4b16-9e32-c952a5bdb134",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cdd33424-d48c-4bb0-85cf-f3d6b2d36257",
              "name": "prompt",
              "value": "={{ $('视频确认').item.json.data['视频描述'] }}",
              "type": "string"
            },
            {
              "id": "6af00053-b097-42d3-998d-ec5fc3bd8bc1",
              "name": "accessKeyId",
              "value": "你的火山引擎accessKeyId",
              "type": "string"
            },
            {
              "id": "cd6e2ed4-dd56-403b-8ea2-8d5f663ded74",
              "name": "secretAccessKey",
              "value": "你的火山引擎secretAccessKey",
              "type": "string"
            },
            {
              "id": "ca99eada-db11-44da-a427-840b9d31effc",
              "name": "host",
              "value": "visual.volcengineapi.com",
              "type": "string"
            },
            {
              "id": "718c0a66-c78d-4947-bf05-9ef1f21cf267",
              "name": "serviceName",
              "value": "cv",
              "type": "string"
            },
            {
              "id": "2a0ad282-9f1f-4b9b-a78c-fb5b84ce7b7c",
              "name": "region",
              "value": "cn-north-1",
              "type": "string"
            },
            {
              "id": "2dcdd6c8-458b-4253-89e7-f59e64900aee",
              "name": "method",
              "value": "POST",
              "type": "string"
            },
            {
              "id": "6447ed97-9c06-4e4d-8d37-c53ef8655e5a",
              "name": "version",
              "value": "2022-08-31",
              "type": "string"
            },
            {
              "id": "46a1be81-7646-4748-bb0c-0ee59aadae8c",
              "name": "reqKey",
              "value": "jimeng_ti2v_v30_pro",
              "type": "string"
            },
            {
              "id": "c49498dc-33fa-4323-a2d3-68c8ceae4f02",
              "name": "binary_data_base64",
              "value": "=[\"{{ $('Edit Fields').item.json.base }}\"]",
              "type": "array"
            },
            {
              "id": "fef3141a-60ef-4e1b-8cb4-d5f9d8ba1760",
              "name": "action",
              "value": "CVSync2AsyncSubmitTask",
              "type": "string"
            },
            {
              "id": "b645b22f-6280-4358-9394-2b299b0908be",
              "name": "retryCount",
              "value": "0",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -512,
        1088
      ],
      "id": "d1cbffd8-a77d-4190-84ff-a11cdeeb52e2",
      "name": "准备视频生成参数"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# coding:utf-8\n\"\"\"\n基于你提供的Python代码改写的n8n版本\n\"\"\"\n\nimport json\nimport datetime\nimport hashlib\nimport hmac\n\n# 获取输入数据\ninput_data = items[0]['json']\n\n# 配置参数\nmethod = 'POST'\nhost = 'visual.volcengineapi.com'\nregion = input_data.get('region', 'cn-north-1')  # 你说的区域\naction = input_data.get('action', 'CVSync2AsyncSubmitTask')\nversion= input_data.get('version', '2022-08-31')\nreqKey= input_data.get('reqKey', 'jimeng_ti2v_v30_pro')\nendpoint = 'https://visual.volcengineapi.com'\nservice = 'cv'\n\n# 从输入数据获取凭证\naccess_key = input_data.get('accessKeyId', 'your-ak')\nsecret_key = input_data.get('secretAccessKey', 'your-sk')\nbinary_data_base64 = input_data.get('binary_data_base64', '')\nprint(f\"binary_data_base64 type: {type(binary_data_base64)}\")\nprint(f\"binary_data_base64 length: {len(str(binary_data_base64))}\")\n\ndef sign(key, msg):\n    return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()\n\ndef getSignatureKey(key, dateStamp, regionName, serviceName):\n    kDate = sign(key.encode('utf-8'), dateStamp)\n    kRegion = sign(kDate, regionName)\n    kService = sign(kRegion, serviceName)\n    kSigning = sign(kService, 'request')\n    return kSigning\n\ndef formatQuery(parameters):\n    request_parameters_init = ''\n    for key in sorted(parameters):\n        request_parameters_init += key + '=' + parameters[key] + '&'\n    request_parameters = request_parameters_init[:-1]\n    return request_parameters\n\ndef signV4Request(access_key, secret_key, service, req_query, req_body):\n    if access_key is None or secret_key is None:\n        return {'error': 'No access key is available.'}\n    \n    t = datetime.datetime.utcnow()\n    current_date = t.strftime('%Y%m%dT%H%M%SZ')\n    datestamp = t.strftime('%Y%m%d')  # Date w/o time, used in credential scope\n    \n    print(f\"=== 基本信息 ===\")\n    print(f\"Current Date: {current_date}\")\n    print(f\"Date Stamp: {datestamp}\")\n    print(f\"Region: {region}\")\n    print(f\"Service: {service}\")\n    print(f\"Method: {method}\")\n    print(f\"Host: {host}\")\n    print(f\"Access Key: {access_key[:10]}...\")  # 只显示前10位\n    print()\n    \n    canonical_uri = '/'\n    canonical_querystring = req_query\n    signed_headers = 'content-type;host;x-content-sha256;x-date'\n    payload_hash = hashlib.sha256(req_body.encode('utf-8')).hexdigest()\n    content_type = 'application/json'\n    \n    print(f\"=== 请求信息 ===\")\n    print(f\"Query String: {canonical_querystring}\")\n    print(f\"Body: {req_body}\")\n    print(f\"Body Bytes Length: {len(req_body.encode('utf-8'))}\")\n    print(f\"Payload Hash: {payload_hash}\")\n    print(f\"Content Type: {content_type}\")\n    print()\n    \n    canonical_headers = 'content-type:' + content_type + '\\n' + 'host:' + host + \\\n                       '\\n' + 'x-content-sha256:' + payload_hash + \\\n                       '\\n' + 'x-date:' + current_date + '\\n'\n    \n    print(f\"=== Canonical Headers ===\")\n    print(f\"Signed Headers: {signed_headers}\")\n    print(\"Canonical Headers:\")\n    print(repr(canonical_headers))\n    print()\n    \n    canonical_request = method + '\\n' + canonical_uri + '\\n' + canonical_querystring + \\\n                       '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + payload_hash\n    \n    print(\"=== Canonical Request ===\")\n    print(repr(canonical_request))  # 使用 repr 显示转义字符\n    print()\n    print(\"Canonical Request 原文:\")\n    print(canonical_request)\n    print()\n    \n    canonical_request_hash = hashlib.sha256(canonical_request.encode('utf-8')).hexdigest()\n    print(f\"=== Canonical Request Hash ===\")\n    print(canonical_request_hash)\n    print()\n    \n    algorithm = 'HMAC-SHA256'\n    credential_scope = datestamp + '/' + region + '/' + service + '/' + 'request'\n    string_to_sign = algorithm + '\\n' + current_date + '\\n' + credential_scope + '\\n' + canonical_request_hash\n    \n    print(\"=== String to Sign ===\")\n    print(f\"Algorithm: {algorithm}\")\n    print(f\"Current Date: {current_date}\")\n    print(f\"Credential Scope: {credential_scope}\")\n    print(f\"Canonical Request Hash: {canonical_request_hash}\")\n    print()\n    print(\"String to Sign 原文:\")\n    print(repr(string_to_sign))\n    print()\n    print(string_to_sign)\n    print()\n    \n    # 逐步显示签名key生成过程\n    print(\"=== 签名Key生成过程 ===\")\n    kDate = sign(secret_key.encode('utf-8'), datestamp)\n    print(f\"kDate (hex): {kDate.hex()}\")\n    \n    kRegion = sign(kDate, region)\n    print(f\"kRegion (hex): {kRegion.hex()}\")\n    \n    kService = sign(kRegion, service)\n    print(f\"kService (hex): {kService.hex()}\")\n    \n    kSigning = sign(kService, 'request')\n    print(f\"kSigning (hex): {kSigning.hex()}\")\n    print()\n    \n    signature = hmac.new(kSigning, (string_to_sign).encode('utf-8'), hashlib.sha256).hexdigest()\n    \n    print(f\"=== Final Signature ===\")\n    print(f\"Signature Length: {len(signature)}\")\n    print(f\"Signature: {signature}\")\n    print()\n    \n    authorization_header = algorithm + ' ' + 'Credential=' + access_key + '/' + \\\n                          credential_scope + ', ' + 'SignedHeaders=' + \\\n                          signed_headers + ', ' + 'Signature=' + signature\n    \n    print(f\"=== Authorization Header ===\")\n    print(authorization_header)\n    print()\n    \n    headers = {\n        'X-Date': current_date,\n        'Authorization': authorization_header,\n        'X-Content-Sha256': payload_hash,\n        'Content-Type': content_type\n    }\n    \n    request_url = endpoint + '?' + canonical_querystring\n    \n    return {\n        'headers': headers,\n        'url': request_url,\n        'body': req_body,\n        'debug': {\n            'canonical_request': canonical_request,\n            'string_to_sign': string_to_sign,\n            'signature': signature,\n            'authorization': authorization_header,\n            'payload_hash': payload_hash,\n            'current_date': current_date,\n            'credential_scope': credential_scope,\n            'region': region,\n            'service': service,\n            'canonical_request_hash': canonical_request_hash\n        }\n    }\n\n# 请求Query，根据你的需求调整\nquery_params = {\n    'Action': action,  # 你之前用的Action\n    'Version': version,  # 你之前用的Version\n}\nformatted_query = formatQuery(query_params)\nif binary_data_base64:\n    binary_data_base64 = str(binary_data_base64)\n  \n# 请求Body，使用你提供的正确参数\nbody_params = {\n    \"binary_data_base64\": [binary_data_base64],\n    \"seed\": -1,\n    \"prompt\": input_data.get('prompt', 'your-ak'),\n    \"req_key\": reqKey\n}\n# 确保JSON序列化不包含额外空格，与原始代码保持一致\nformatted_body = json.dumps(body_params, separators=(',', ':'), ensure_ascii=False)\n\n# 执行签名\nresult = signV4Request(access_key, secret_key, service, formatted_query, formatted_body)\n\n# 返回结果给 n8n\nreturn [{\"json\": result}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        1088
      ],
      "id": "8a4dcadc-f89b-4a7d-aece-84706562941a",
      "name": "Code: 格式化请求体"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://visual.volcengineapi.com",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "Action",
              "value": "={{ $('准备视频生成参数').item.json.action }}"
            },
            {
              "name": "Version",
              "value": "={{ $('准备视频生成参数').item.json.version }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $json.headers.Authorization }}"
            },
            {
              "name": "Host",
              "value": "visual.volcengineapi.com"
            },
            {
              "name": "X-Content-Sha256",
              "value": "={{ $json.headers['X-Content-Sha256'] }}"
            },
            {
              "name": "X-Date",
              "value": "={{ $json.headers['X-Date'] }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"binary_data_base64\": [\"{{ $('准备视频生成参数').item.json.binary_data_base64[0] }}\"],\"seed\": -1,\"prompt\":\"{{ $('准备视频生成参数').item.json.prompt }}\",\"req_key\":\"{{ $('准备视频生成参数').item.json.reqKey }}\"}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        64,
        1088
      ],
      "id": "407b17bd-74f2-4cef-aeff-7b64c228be82",
      "name": "提交生视频任务",
      "retryOnFail": true
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# coding:utf-8\n\"\"\"\n基于你提供的Python代码改写的n8n版本\n\"\"\"\n\nimport json\nimport datetime\nimport hashlib\nimport hmac\n\ntry:\n  # 获取输入数据\n  input_data = _(\"准备视频生成参数\").first().json\n  # 配置参数\n  method = 'POST'\n  host = 'visual.volcengineapi.com'\n  region = input_data.get('region', 'cn-beijing')  # 你说的区域\n  action = input_data.get('action', 'CVSync2AsyncSubmitTask')\n  version= input_data.get('version', '2022-08-31')\n  reqKey= input_data.get('reqKey', 'jimeng_ti2v_v30_pro')\n  endpoint = 'https://visual.volcengineapi.com'\n  service = 'cv'\n  \n  # 从输入数据获取凭证\n  access_key = input_data.get('accessKeyId', 'your-ak')\n  secret_key = input_data.get('secretAccessKey', 'your-sk')\n  \n  def sign(key, msg):\n      return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()\n  \n  def getSignatureKey(key, dateStamp, regionName, serviceName):\n      kDate = sign(key.encode('utf-8'), dateStamp)\n      kRegion = sign(kDate, regionName)\n      kService = sign(kRegion, serviceName)\n      kSigning = sign(kService, 'request')\n      return kSigning\n  \n  def formatQuery(parameters):\n      request_parameters_init = ''\n      for key in sorted(parameters):\n          request_parameters_init += key + '=' + parameters[key] + '&'\n      request_parameters = request_parameters_init[:-1]\n      return request_parameters\n  \n  def signV4Request(access_key, secret_key, service, req_query, req_body):\n      if access_key is None or secret_key is None:\n          return {'error': 'No access key is available.'}\n      \n      t = datetime.datetime.utcnow()\n      current_date = t.strftime('%Y%m%dT%H%M%SZ')\n      datestamp = t.strftime('%Y%m%d')  # Date w/o time, used in credential scope\n      \n      print(f\"=== 基本信息 ===\")\n      print(f\"Current Date: {current_date}\")\n      print(f\"Date Stamp: {datestamp}\")\n      print(f\"Region: {region}\")\n      print(f\"Service: {service}\")\n      print(f\"Method: {method}\")\n      print(f\"Host: {host}\")\n      print(f\"Access Key: {access_key[:10]}...\")  # 只显示前10位\n      print()\n      \n      canonical_uri = '/'\n      canonical_querystring = req_query\n      signed_headers = 'content-type;host;x-content-sha256;x-date'\n      payload_hash = hashlib.sha256(req_body.encode('utf-8')).hexdigest()\n      content_type = 'application/json'\n      \n      print(f\"=== 请求信息 ===\")\n      print(f\"Query String: {canonical_querystring}\")\n      print(f\"Body: {req_body}\")\n      print(f\"Body Bytes Length: {len(req_body.encode('utf-8'))}\")\n      print(f\"Payload Hash: {payload_hash}\")\n      print(f\"Content Type: {content_type}\")\n      print()\n      \n      canonical_headers = 'content-type:' + content_type + '\\n' + 'host:' + host + \\\n                         '\\n' + 'x-content-sha256:' + payload_hash + \\\n                         '\\n' + 'x-date:' + current_date + '\\n'\n      \n      print(f\"=== Canonical Headers ===\")\n      print(f\"Signed Headers: {signed_headers}\")\n      print(\"Canonical Headers:\")\n      print(repr(canonical_headers))\n      print()\n      \n      canonical_request = method + '\\n' + canonical_uri + '\\n' + canonical_querystring + \\\n                         '\\n' + canonical_headers + '\\n' + signed_headers + '\\n' + payload_hash\n      \n      print(\"=== Canonical Request ===\")\n      print(repr(canonical_request))  # 使用 repr 显示转义字符\n      print()\n      print(\"Canonical Request 原文:\")\n      print(canonical_request)\n      print()\n      \n      canonical_request_hash = hashlib.sha256(canonical_request.encode('utf-8')).hexdigest()\n      print(f\"=== Canonical Request Hash ===\")\n      print(canonical_request_hash)\n      print()\n      \n      algorithm = 'HMAC-SHA256'\n      credential_scope = datestamp + '/' + region + '/' + service + '/' + 'request'\n      string_to_sign = algorithm + '\\n' + current_date + '\\n' + credential_scope + '\\n' + canonical_request_hash\n      \n      print(\"=== String to Sign ===\")\n      print(f\"Algorithm: {algorithm}\")\n      print(f\"Current Date: {current_date}\")\n      print(f\"Credential Scope: {credential_scope}\")\n      print(f\"Canonical Request Hash: {canonical_request_hash}\")\n      print()\n      print(\"String to Sign 原文:\")\n      print(repr(string_to_sign))\n      print()\n      print(string_to_sign)\n      print()\n      \n      # 逐步显示签名key生成过程\n      print(\"=== 签名Key生成过程 ===\")\n      kDate = sign(secret_key.encode('utf-8'), datestamp)\n      print(f\"kDate (hex): {kDate.hex()}\")\n      \n      kRegion = sign(kDate, region)\n      print(f\"kRegion (hex): {kRegion.hex()}\")\n      \n      kService = sign(kRegion, service)\n      print(f\"kService (hex): {kService.hex()}\")\n      \n      kSigning = sign(kService, 'request')\n      print(f\"kSigning (hex): {kSigning.hex()}\")\n      print()\n      \n      signature = hmac.new(kSigning, (string_to_sign).encode('utf-8'), hashlib.sha256).hexdigest()\n      \n      print(f\"=== Final Signature ===\")\n      print(f\"Signature Length: {len(signature)}\")\n      print(f\"Signature: {signature}\")\n      print()\n      \n      authorization_header = algorithm + ' ' + 'Credential=' + access_key + '/' + \\\n                            credential_scope + ', ' + 'SignedHeaders=' + \\\n                            signed_headers + ', ' + 'Signature=' + signature\n      \n      print(f\"=== Authorization Header ===\")\n      print(authorization_header)\n      print()\n      \n      headers = {\n          'X-Date': current_date,\n          'Authorization': authorization_header,\n          'X-Content-Sha256': payload_hash,\n          'Content-Type': content_type\n      }\n      \n      request_url = endpoint + '?' + canonical_querystring\n      \n      return {\n          'headers': headers,\n          'url': request_url,\n          'body': req_body,\n          'debug': {\n              'canonical_request': canonical_request,\n              'string_to_sign': string_to_sign,\n              'signature': signature,\n              'authorization': authorization_header,\n              'payload_hash': payload_hash,\n              'current_date': current_date,\n              'credential_scope': credential_scope,\n              'region': region,\n              'service': service,\n              'canonical_request_hash': canonical_request_hash\n          }\n      }\n  \n  # 请求Query，根据你的需求调整\n  query_params = {\n      'Action': 'CVSync2AsyncGetResult',  # 你之前用的Action\n      'Version': version,  # 你之前用的Version\n  }\n  formatted_query = formatQuery(query_params)\n  \n  task_id = _(\"提交生视频任务\").first().json.data.task_id\n  # 请求Body，使用你提供的正确参数\n  body_params = {\n      \"req_key\": reqKey,\n      \"task_id\": task_id\n  }\n  # 确保JSON序列化不包含额外空格，与原始代码保持一致\n  formatted_body = json.dumps(body_params, separators=(',', ':'), ensure_ascii=False)\n  \n  # 执行签名\n  result = signV4Request(access_key, secret_key, service, formatted_query, formatted_body)\n  \n  # 返回结果给 n8n\n  return [{\"json\": result}]\nexcept Exception as e:\n    # Stop and Error\n    raise Exception(f\"数据获取失败: {str(e)}\")"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -992,
        1456
      ],
      "id": "71d2e28c-6b92-47b8-b5f9-76e699a3eab1",
      "name": "格式化查询任务参数",
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "errorMessage": "={{ $json.error }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -656,
        1728
      ],
      "id": "ec2e8494-844f-4fdc-8749-c91189f2b838",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://visual.volcengineapi.com",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "Action",
              "value": "=CVSync2AsyncGetResult"
            },
            {
              "name": "=Version",
              "value": "={{ $('准备视频生成参数').item.json.version }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $('格式化查询任务参数').item.json.headers.Authorization }}"
            },
            {
              "name": "Host",
              "value": "visual.volcengineapi.com"
            },
            {
              "name": "X-Content-Sha256",
              "value": "={{ $('格式化查询任务参数').item.json.headers['X-Content-Sha256'] }}"
            },
            {
              "name": "X-Date",
              "value": "={{ $('格式化查询任务参数').item.json.headers['X-Date'] }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"req_key\":\"{{ $('准备视频生成参数').item.json.reqKey }}\",\n  \"task_id\": \"{{ $('提交生视频任务').item.json.data.task_id }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -576,
        1440
      ],
      "id": "5f954174-af8a-4866-b219-dc429dee6168",
      "name": "查询任务",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "error-check-1",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "error-check-2",
              "leftValue": "={{ $json.error.message }}",
              "rightValue": "Risk Not",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -368,
        1440
      ],
      "id": "d108b6f7-4844-4ab9-8d28-ed7fcce7e835",
      "name": "错误检查"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-record-1",
              "name": "error_type",
              "value": "={{ $json.error.name || 'Unknown Error' }}",
              "type": "string"
            },
            {
              "id": "error-record-4",
              "name": "error_details",
              "value": "={{ {\n  \"error_message\": $json.errorMessage,\n  \"error_description\": $json.errorDescription,\n  \"http_code\": $json.errorDetails?.httpCode,\n  \"raw_error\": $json.errorDetails?.rawErrorMessage?.[0],\n  \"error_time\": $now.toISO(),\n  \"node_name\": $json.n8nDetails?.nodeName\n} }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -48,
        1424
      ],
      "id": "ec773ec8-f36f-40f0-89a8-7156f5a4d78b",
      "name": "记录错误详情"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ec0664c8-8142-45ac-9fbf-c0fa33cff3dc",
              "leftValue": "={{ $json.data.status }}",
              "rightValue": "done",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -320,
        1696
      ],
      "id": "63ec6063-f4f2-41f8-9702-831a7862e194",
      "name": "状态检查"
    },
    {
      "parameters": {
        "content": "## 生成视频",
        "height": 864,
        "width": 1360,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1120,
        1040
      ],
      "typeVersion": 1,
      "id": "42619ad0-31df-4578-abd9-e90d6bf2a239",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Nano 生图",
        "height": 608,
        "width": 1360,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1120,
        384
      ],
      "typeVersion": 1,
      "id": "87f5fd46-55cf-4b75-8f8c-1eab06da7299",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -32,
        176
      ],
      "id": "92ce3f0f-e304-4e53-a2d7-05bd212e8791",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "181bc468-e361-40d4-b523-9fec9785cb32",
              "leftValue": "={{ $json.choices[0].message.images }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -528,
        768
      ],
      "id": "7f0cdd61-8d2e-4aa8-905f-2cfa78fdc818",
      "name": "If2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -288,
        832
      ],
      "id": "78cf3805-d820-46ad-bc58-4d4fb43cc69b",
      "name": "Wait",
      "webhookId": "c93e44e0-ef25-4e75-9526-478d7c338ea5"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code - Assemble a single payload for OpenRouter with multiple images.\nconst codeNodeItems = $('Code').all(); // Get all output items from the '''Code''' node\n\n// 1. Get the single text prompt from the trigger.\nconst originalPrompt = $('Telegram Trigger').first().json.message.text;\n\n// 2. Initialize the content array and add the text prompt just once.\nconst content = [];\nif (originalPrompt && originalPrompt.trim()) {\n  content.push({\n    type: \"text\",\n    text: JSON.stringify(originalPrompt.trim())\n  });\n}\n\nconst inputData = $input.all();\nlet imagesFound = 0;\n\n// 3. Loop through all input items to gather and append each image.\nfor (const [index, item] of inputData.entries()) {\n  const base64Data = item.json.data;\n  const mimeType = codeNodeItems[index]?.json?.mimeType;\n\n  if (base64Data && mimeType) {\n    const imageUrl = `data:${mimeType};base64,${base64Data}`;\n    content.push({\n      type: \"image_url\",\n      image_url: { url: imageUrl }\n    });\n    imagesFound++;\n  } else {\n    console.log(`Warning: Could not process image for item at index ${index}. Missing data or mimeType.`);\n  }\n}\n\n// 4. Check if we found any images before creating the final payload.\nif (imagesFound > 0) {\n  const payload = {\n    model: \"google/gemini-2.5-flash-image-preview:free\",\n    modalities: [\"image\", \"text\"],\n    messages: [{\n      role: \"user\",\n      content: content\n    }]\n  };\n  // 5. Return a single item for the next node, containing the complete payload.\n  return [{ json: payload }];\n} else {\n  // If no images were processed successfully, return an error item to allow for debugging.\n  return [{\n    json: {\n      error: \"Code1: Failed to create payload. No valid image data was found in the input items.\"\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        176
      ],
      "id": "8996573a-7f15-485b-8cfe-6115c443467b",
      "name": "Code1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -784,
        1440
      ],
      "id": "3672789c-3a91-4b1a-961e-0204cacb36e3",
      "name": "Wait1",
      "webhookId": "6734babe-3510-4c02-93c3-32c0d7d8b914"
    },
    {
      "parameters": {
        "errorMessage": "={{ $json.error }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -816,
        560
      ],
      "id": "f42447f6-0bd6-48b7-9eb2-ac6d7f4db3ba",
      "name": "Network Error"
    },
    {
      "parameters": {
        "errorMessage": "={{ $json.error }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -768,
        800
      ],
      "id": "08550a6d-897d-4d28-b75d-a5b4ef8bc040",
      "name": "Network Error1"
    },
    {
      "parameters": {
        "content": "#### 配置 OpenRouter 凭证 👇",
        "height": 80,
        "width": 214,
        "color": 3
      },
      "id": "9066bab3-4287-4e71-9e69-d9c3a03a2a45",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1040,
        480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### 配置 OpenRouter 凭证 👇",
        "height": 80,
        "width": 214,
        "color": 3
      },
      "id": "fbe46bd0-3341-4f1b-a9eb-f46136e044b0",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1024,
        752
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e6ce996c-a6ae-4658-ae00-4c9a031185ad",
              "leftValue": "={{ $json.choices[0].finish_reason === \"content_filter\" }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "23141206-fe2a-412f-875c-359217968e9b",
              "leftValue": "={{ $json.choices[0].native_finish_reason }}",
              "rightValue": "PROHIBITED_CONTENT",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -704,
        672
      ],
      "id": "43d85070-439c-4a21-81d4-2f72fbb1419c",
      "name": "Content Filter Check"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=抱歉，您的内容包含不当信息\n\n请重新上传参考图或者修改提示词后重试",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -528,
        624
      ],
      "id": "4ec9fe3f-4638-4f65-835c-d9ac83b5e896",
      "name": "Send a text message2",
      "webhookId": "550ac7ee-1fcd-4841-aa58-aa556d2c96d5"
    },
    {
      "parameters": {
        "content": "#### 配置火山引擎信息 👇",
        "height": 80,
        "width": 214,
        "color": 3
      },
      "id": "17d9fd71-8a18-45ef-a2a4-a52da3208a51",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -576,
        1040
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 🎨 N8N+Nano多模态聊天工作流\n#### [AI自动化场景实战课：让重复工作成为过去式](https://rvfdqgohv5q.feishu.cn/wiki/DkU6we3HGiKgNzkYRHLcOdBMncd)\n\n> 此工作流展示了如何通过自然语言交互，智能判断用户意图，并执行文生图、图生图、图生视频等多种复杂任务。\n\n📋 **基本信息**\n*   **工作流名称**: Nano-Flow-OpenRouter-Multimodal\n*   **版本**: v1.1.0\n*   **技术栈**: N8N + OpenRouter + Telegram + DeepSeek + 火山引擎\n*   **支持模式**: 智能意图识别、文生图、图生图、图生视频\n\n🎯 **功能概述**\n一个强大的多模态AI助手，通过Telegram接收用户消息和文件。它首先使用一个LLM（DeepSeek）分析用户意图，判断是需要生成新图还是编辑现有图片。随后，它调用OpenRouter的Gemini模型执行图像生成/编辑，并能进一步将生成的图片转化为视频。\n\n⚙️ **配置说明**\n1.  **Telegram Trigger**: 作为工作流的入口，接收用户的文本消息和图片文件。\n2.  **意图识别 (LangChain)**:\n    *   使用 `DeepSeek Chat Model` 分析用户文本，判断其意图是 `image_generate` (文生图) 还是 `image_edit` (图生图)。\n    *   `Structured Output Parser` 确保AI以统一的JSON格式返回判断结果。\n3.  **IF节点 (逻辑分流)**:\n    *   如果意图是 `image_generate`，直接调用OpenRouter进行文生图。\n    *   如果意图是 `image_edit`，则会提示用户上传图片，然后将图片和指令一起发送给OpenRouter进行图生图。\n4.  **核心处理 (HTTP Request)**:\n    *   **OpenRouter**: 调用 `google/gemini-flash-image-preview` 模型执行文生图或图生图任务。\n    *   **火山引擎**: 在用户确认后，调用火山引擎的 `jimeng_ti2v_v30_pro` 模型将静态图片生成为动态视频。\n5.  **Code节点 (数据处理)**:\n    *   使用Python和JavaScript对API的请求体和返回的数据进行格式化，例如处理图片Base64编码、生成签名等。\n\n\n💡 **使用场景**\n*   **智能AI客服**: 在Telegram中直接与AI助手对话，发送“画一只猫”即可获得图片，或发送一张风景照并说“把天空调成金色”来修图。\n*   **内容创作**: 快速生成文章配图、社交媒体图片，甚至将图片一键转化为短视频。\n*   **多模态应用开发**: 作为一个强大的模板，用于学习和构建更复杂的、能够理解并处理文本、图片、视频等多种信息的AI应用。",
        "height": 1008,
        "width": 1040,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2208,
        240
      ],
      "typeVersion": 1,
      "id": "aa9a5d7c-d725-47dc-9730-e5393e6d8372",
      "name": "Sticky Note4"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Network Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Send a photo message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a photo message": {
      "main": [
        [
          {
            "node": "视频确认",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Content Filter Check",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Network Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "视频确认": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "准备视频生成参数",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "准备视频生成参数": {
      "main": [
        [
          {
            "node": "Code: 格式化请求体",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: 格式化请求体": {
      "main": [
        [
          {
            "node": "提交生视频任务",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "提交生视频任务": {
      "main": [
        [
          {
            "node": "格式化查询任务参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "格式化查询任务参数": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "查询任务": {
      "main": [
        [
          {
            "node": "错误检查",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "错误检查": {
      "main": [
        [
          {
            "node": "记录错误详情",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "状态检查",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "记录错误详情": {
      "main": [
        [
          {
            "node": "格式化查询任务参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "状态检查": {
      "main": [
        [
          {
            "node": "Send a video",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "格式化查询任务参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "查询任务",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Filter Check": {
      "main": [
        [
          {
            "node": "Send a text message2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8b9d42a4-1d3b-4f21-9791-63445db4f3d9",
  "meta": {
    "instanceId": "a152539bc323133bde80781a1dc51fefe2ad2e9f6579ca96b98f3bb66ae5bb00"
  },
  "id": "EX69M7lZ6GcDGizH",
  "tags": []
}