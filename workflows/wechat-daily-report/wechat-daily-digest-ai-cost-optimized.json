{
  "name": "WeChat-Daily-Digest-AI-Cost-Optimized",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "id": "b0efabdd-948a-4e01-b233-68cd5f1906e8",
      "name": "Run every day at 8am",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        20,
        -540
      ],
      "timezone": "Asia/Shanghai"
    },
    {
      "parameters": {
        "url": "http://host.docker.internal:5030/api/v1/chatlog",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"time\": \"{{ $json.date }}~{{ $json.date }}\",\n  \"talker\": \"{{ $json.group_name }}\"\n}",
        "options": {}
      },
      "id": "7341c497-4022-40e3-b8b2-0048700ccd10",
      "name": "Fetch Yesterday's Chatlog",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        60,
        -100
      ]
    },
    {
      "parameters": {
        "jsCode": "// Node: Parse & Structure Data (Repaired)\n// Input: Raw chat log text from the previous node.\n// Output: A single, structured JSON object with correctly parsed messages.\n\nconst rawLog = $json.data;\nconst talkerName = $('ConfigureChatParameters').first().json.group_name;\n\nif (!rawLog) {\n  console.log(\"输入数据为空，请检查上游节点。\");\n  return { error: \"Input data is empty or not found.\" };\n}\n\n// 获取昨天的日期作为所有消息的日期前缀\nconst datePrefix = $('ConfigureChatParameters').first().json.date;\n\n\n// 按一个或多个空行来分割消息块，这更可靠\nconst messageBlocks = rawLog.trim().split(/\\n\\s*\\n/);\n\nconst messages = [];\nfor (const block of messageBlocks) {\n  if (block.trim() === \"\") continue;\n\n  const lines = block.trim().split('\\n');\n  const header = lines.shift(); // 第一行是 \"发送者 HH:MM:SS\"\n\n  // 正则表达式，用于从 header 中捕获发送者和时间\n  const match = header.match(/(.+) (\\d{2}:\\d{2}:\\d{2})$/);\n\n  // 如果第一行不符合 \"发送者 时间\" 的格式，则跳过这个块\n  if (!match) {\n    console.log(\"跳过无效的消息块:\", block);\n    continue;\n  }\n\n  const senderName = match[1].trim();\n  const timeStr = match[2];\n  const content = lines.join('\\n').trim();\n\n  // 组合日期和时间，创建完整的ISO时间戳\n  const isoTime = `${datePrefix}T${timeStr}+08:00`;\n\n  messages.push({\n    content: content,\n    contents: null,\n    sender_name: senderName,\n    talker_name: talkerName,\n    time: isoTime,\n    seq: messages.length + 1\n  });\n}\n\nconst now = new Date();\nconst result = {\n  step: \"1_structured_data\",\n  description: \"Parsed and structured data from raw text\",\n  date: $('ConfigureChatParameters').first().json.date,\n  timestamp: now.toISOString(),\n  sources: {\n    [talkerName]: {\n      message_count: messages.length,\n      messages: messages\n    }\n  },\n  statistics: {\n    total_sources: 1,\n    total_messages: messages.length,\n    sources_summary: {\n      [talkerName]: messages.length\n    }\n  }\n};\n\nconsole.log(\"成功获取 \" + messages.length +\" 条消息 from \" + talkerName)\n\nreturn [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        -100
      ],
      "id": "02d16e25-f519-4fdb-b7f1-b97edcbf4f6a",
      "name": "Parse & Structure Data"
    },
    {
      "parameters": {
        "jsCode": "// Node: Clean & Segment by Time (Repaired with Logs and Validation - Fixed)\n// Input: The structured JSON object from the \"Parse & Structure Data\" node.\n// Output: An array of time segments, with correct message counts.\n\nconst structuredData = $('Parse & Structure Data').first().json;\nconst sourceName = Object.keys(structuredData.sources)[0];\nconst allMessages = structuredData.sources[sourceName].messages;\n\nconsole.log(`\\n[blue]开始时间段分割和清洗...[/blue]`);\nconsole.log(`[cyan]原始消息总数: ${allMessages.length} 条[/cyan]`);\n\nif (!allMessages || allMessages.length === 0) {\n  console.log(\"没有消息需要处理。\");\n  return [];\n}\n\n// 1. 清洗消息\nconst cleanedMessages = allMessages.filter(msg => {\n  const hasSender = msg.sender_name && msg.sender_name.trim() !== \"\";\n  const hasContent = (msg.content && msg.content.trim() !== \"\") || (msg.contents && msg.contents !== null);\n  \n  // 强化系统消息过滤条件\n  const isSystemMessage = (msg.sender_name === \"\" || msg.sender_name === \"系统消息\") || \n                          (msg.content && (\n                            msg.content.includes(\"加入了群聊\") ||\n                            msg.content.includes(\"撤回了一条消息\") ||\n                            msg.content.includes(\"拍了拍\") ||\n                            msg.content.includes(\"与群里其他人都不是朋友关系\")\n                          ));\n\n  return hasSender && hasContent && !isSystemMessage;\n});\n\nconsole.log(`[cyan]清洗后有效消息总数: ${cleanedMessages.length} 条 (过滤掉系统消息等)[/cyan]`);\n\n// 2. 定义时间段\nconst segmentsConfig = [\n  { name: \"凌晨\", start_hour: 0, end_hour: 6, messages: [] },\n  { name: \"上午\", start_hour: 6, end_hour: 12, messages: [] },\n  { name: \"下午\", start_hour: 12, end_hour: 18, messages: [] },\n  { name: \"晚上\", start_hour: 18, end_hour: 24, messages: [] }\n];\n\n// 3. 将清洗后的消息放入时间段\nfor (const message of cleanedMessages) {\n  try {\n    const msgHour = parseInt(message.time.substring(11, 13), 10);\n\n    if (isNaN(msgHour)) {\n        console.log(`[yellow]警告: 无法解析消息时间，跳过: ${message.time}[/yellow]`);\n        continue; \n    }\n\n    let assigned = false;\n    for (const segment of segmentsConfig) {\n      if (msgHour >= segment.start_hour && msgHour < segment.end_hour) {\n        segment.messages.push(message);\n        assigned = true;\n        break;\n      }\n    }\n    if (!assigned) {\n        console.log(`[yellow]警告: 消息未分配到任何时间段，跳过: ${message.time} - ${message.sender_name}: ${message.content.substring(0, 50)}...[/yellow]`);\n    }\n  } catch (e) {\n    console.log(`[red]错误: 处理消息时发生异常: ${message.time} - ${e.message}[/red]`);\n  }\n}\n\n// 4. 格式化最终输出\nconst result = segmentsConfig\n  .filter(s => s.messages.length > 0)\n  .map(s => ({\n    json: {\n      name: s.name,\n      start_hour: s.start_hour,\n      end_hour: s.end_hour,\n      messages_log: s.messages.map(m => `${m.sender_name}: ${m.content}`).join('\\n---\\n'),\n      message_count: s.messages.length\n    }\n  }));\n\n// 5. 打印每个时间段的日志\nconsole.log(`\\n[blue]时间段分割结果:[/blue]`);\nlet totalSegmentedMessages = 0;\nsegmentsConfig.forEach(s => {\n    if (s.messages.length > 0) {\n        console.log(`  📅 ${s.name} (${s.start_hour}-${s.end_hour}时): ${s.messages.length} 条消息`);\n        totalSegmentedMessages += s.messages.length;\n    }\n});\n\n// 6. 数据验证\nconsole.log(`\\n[blue]数据验证:[/blue]`);\nconsole.log(`  清洗后消息总数: ${cleanedMessages.length} 条`);\nconsole.log(`  分段后消息总数: ${totalSegmentedMessages} 条`);\n\nif (cleanedMessages.length === totalSegmentedMessages) {\n  console.log(`[green]数据验证通过: 所有清洗后的消息都已成功分段。[/green]`);\n} else {\n  console.log(`[red]数据验证失败: 清洗后消息 (${cleanedMessages.length}) 与分段后消息 (${totalSegmentedMessages}) 数量不匹配。[/red]`);\n  // 可以选择抛出错误来中断工作流，或者继续执行\n  // throw new Error(\"消息数量不匹配，数据处理异常。\");\n}\n\nconsole.log(`[green]时间段分割和清洗完成[/green]`);\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        920,
        -100
      ],
      "id": "b9d5acd4-0559-47af-8419-dae86fb52fc7",
      "name": "Clean & Segment by Time"
    },
    {
      "parameters": {
        "content": "## 结构化初始数据\n \n天数据获取与预处理（包含解析、清洗、分段、链接提取、活跃用户统计、消息样本准备）",
        "height": 260,
        "width": 860,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -40,
        -200
      ],
      "id": "00d281ec-7a40-4921-a4e4-a034d921d47e",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## 聊天数据时间分段\n",
        "height": 260,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        860,
        -200
      ],
      "id": "3cef8b1c-c532-45c4-8c12-b28340a07cfc",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## 话题分析\n   * 分而治之: 将长日志分割成小块，逐个处理。\n   * 成本控制: 在粗加工阶段使用廉价模型。\n   * 结构化输出: 强制 AI 返回 JSON 格式，便于后续处理。\n   * 话题聚合: 将所有时间段的话题合并，为最终报告做准备。\n",
        "height": 420,
        "width": 1140,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -40,
        120
      ],
      "id": "ae96b3b5-25af-4379-b108-b83905e1c5b8",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "65cd41dc-69c0-47bb-b334-299a04eafc44",
      "name": "Split in Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        20,
        280
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=你是专业的聊天记录分析专家。你的任务是分析给定的聊天记录片段，并严格按照要求提取核心话题。\n\n### 核心分析原则 (必须严格遵守)\n\n1.  **话题识别标准**:\n    *   **数量门槛**: 至少需要3条相关的消息才能构成一个独立的话题。\n    *   **内容价值**: 话题内容必须有明确的讨论主题和价值。\n    *   **无效内容过滤**: 严禁将无意义的问候（如“早”、“在吗”）、表情符号、或简单的确认（如“好的”、“收到”）作为独立话题。\n\n2.  **话题边界判断**:\n    *   **主题延续**: 如果有新成员加入讨论，但讨论的还是同一个核心主题，这属于**同一话题**。\n    *   **主题转变**: 当讨论的焦点发生明显、不相关的转变时，必须创建**新话题**。\n    *   **时间间隔**: 如果两条消息之间没有直接关联，且时间间隔超过 **30分钟**，应视为**新话题**。\n\n### 内容生成要求\n\n1.  **话题标题 (`topic_title`)**: 生成一个简洁、精准、能概括话题核心的标题。\n2.  **话题描述 (`topic_description`)**:\n    *   **风格**: 使用生动、接地气、略带“骚话”风格的年轻人网络用语。\n    *   **内容**: 描述必须准确反映讨论的实际内容、关键信息和主要观点。\n    *   **长度**: 严格控制在 100 到 150 字之间。\n\n### 绝对输出要求 (最重要)\n\n1.  **纯JSON**: **只允许**输出有效的JSON对象。\n2.  **禁止Markdown**: **严禁**在输出的任何位置使用 ` ```json ` 或 ` ``` ` 进行包裹。\n3.  **禁止解释**: **严禁**在JSON对象前后添加任何形式的解释性文字或注释。\n4.  **群组名**: {{ $('ConfigureChatParameters').item.json.group_name }}\n\n---\n### 输出JSON格式 (严格遵守此结构)\n\n你的响应必须是一个有效的 JSON 对象，且只能是 JSON 对象。不要包含任何额外的文本、解释或 Markdown 代码块（例如，```json）。\n\n```json\n{\n  \"analysis_id\": \"群组名_日期_时间段_analysis\",\n  \"meta\": {\n    \"source\": \"群组名\",\n    \"date\": \"日期\", \n    \"segment\": \"时间段\",\n    \"total_messages\": 消息总数\n  },\n  \"topics\": [\n    {\n      \"topic_id\": \"话题1的ID\",\n      \"topic_title\": \"话题1的标题\",\n      \"topic_description\": \"话题1的详细描述，包含关键词和主要内容，至少50字\",\n      \"is_off_topic\": false,\n      \"topic_start_time\": \"话题开始时间 (ISO格式，例如: 2023-07-03T14:30:00+08:00)\",\n      \"topic_end_time\": \"话题结束时间 (ISO格式，例如: 2023-07-03T15:00:00+08:00)\",\n      \"message_seqs\": [\"构成该话题的所有消息的seq列表，例如: 1, 5, 8\"]\n    }\n  ]\n}\n```\n\n---\n### 待分析的聊天记录\n\n{{ JSON.stringify($json) }}",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        380,
        260
      ],
      "id": "0c08e2ee-bb11-45c9-80ee-836b061bb6ef",
      "name": "Extract Topics (Low Cost AI)"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"required\": [\"analysis_id\", \"meta\", \"topics\"],\n  \"properties\": {\n    \"analysis_id\": {\n      \"type\": \"string\",\n      \"description\": \"唯一分析标识符，格式为群组名_日期_时间段_analysis\",\n      \"pattern\": \"^.+_.+_.+_analysis$\"\n    },\n    \"meta\": {\n      \"type\": \"object\",\n      \"required\": [\"source\", \"date\", \"segment\", \"total_messages\"],\n      \"properties\": {\n        \"source\": {\n          \"type\": \"string\",\n          \"description\": \"数据来源的群组名称\"\n        },\n        \"date\": {\n          \"type\": \"string\",\n          \"description\": \"分析日期\",\n          \"format\": \"date\"\n        },\n        \"segment\": {\n          \"type\": \"string\",\n          \"description\": \"时间段标识\"\n        },\n        \"total_messages\": {\n          \"type\": \"integer\",\n          \"description\": \"消息总数统计\",\n          \"minimum\": 0\n        }\n      }\n    },\n    \"topics\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"topic_id\", \"topic_title\", \"topic_description\", \"is_off_topic\", \"topic_start_time\", \"topic_end_time\", \"message_seqs\"],\n        \"properties\": {\n          \"topic_id\": {\n            \"type\": \"string\",\n            \"description\": \"话题唯一标识符\"\n          },\n          \"topic_title\": {\n            \"type\": \"string\",\n            \"description\": \"话题标题\"\n          },\n          \"topic_description\": {\n            \"type\": \"string\",\n            \"description\": \"话题详细描述，包含关键词和主要内容，至少50字\",\n            \"minLength\": 50\n          },\n          \"is_off_topic\": {\n            \"type\": \"boolean\",\n            \"description\": \"标记是否偏离主题\"\n          },\n          \"topic_start_time\": {\n            \"type\": \"string\",\n            \"description\": \"话题开始时间\",\n            \"format\": \"date-time\"\n          },\n          \"topic_end_time\": {\n            \"type\": \"string\",\n            \"description\": \"话题结束时间\",\n            \"format\": \"date-time\"\n          },\n          \"message_seqs\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\",\n              \"description\": \"消息序列号\"\n            },\n            \"minItems\": 1\n          }\n        }\n      },\n      \"minItems\": 1\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        460,
        420
      ],
      "id": "3c1ff1c6-50d3-4b17-a925-56a188f4ba44",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "// Author: Gemini\n// Date: 2025-07-04\n// Description: This version corrects the data access path within the .map() function.\n// It now correctly reads `item.json.output` based on the actual output from the LLM node,\n// resolving the 'Cannot read properties of undefined' error.\n\n/**\n * Robustly maps a segment string to a Chinese time segment name.\n * @param {string} segmentInput - The segment string, e.g., \"19:30-20:00\" or \"傍晚\".\n * @returns {string} The corresponding Chinese segment name, e.g., \"晚上\".\n */\nfunction mapTimeToChineseSegment(segmentInput) {\n  if (!segmentInput || typeof segmentInput !== 'string') {\n    return \"未知时段\";\n  }\n  const startHour = parseInt(segmentInput.split(':')[0], 10);\n  if (isNaN(startHour)) {\n    return segmentInput;\n  }\n  if (startHour >= 0 && startHour < 6) return \"深夜\";\n  if (startHour >= 6 && startHour < 9) return \"早晨\";\n  if (startHour >= 9 && startHour < 12) return \"上午\";\n  if (startHour >= 12 && startHour < 14) return \"中午\";\n  if (startHour >= 14 && startHour < 18) return \"下午\";\n  if (startHour >= 18 && startHour < 22) return \"晚上\";\n  if (startHour >= 22 && startHour <= 23) return \"深夜\";\n  return \"未知时段\";\n}\n\n// --- Main Logic (Rebuilt) ---\n\n// **THE ONLY FIX IS ON THIS LINE**\n// Correctly access the data from the actual LLM output structure.\nconst analysisResults = items.map(item => item.json.output);\n\nif (!analysisResults || analysisResults.length === 0) {\n  return { json: { error: \"Input data is empty or invalid.\" } };\n}\n\nconst all_topics = [];\nconst sources_info = {};\nconst segments_info = {};\nlet topic_counter = 1;\n\n// A single, robust loop to process all inputs and aggregate correctly.\nfor (const result of analysisResults) {\n  if (!result || !result.topics || !Array.isArray(result.topics)) {\n    continue;\n  }\n\n  const source_name = result.meta.source;\n  const chinese_segment_name = mapTimeToChineseSegment(result.meta.segment);\n  const created_at = result.created_at || new Date().toISOString();\n  const segment_key = `${source_name}_${chinese_segment_name}`;\n\n  // --- Step 1: Aggregate Metadata in Real-time ---\n  if (!segments_info[segment_key]) {\n    segments_info[segment_key] = {\n      source_name: source_name,\n      segment_name: chinese_segment_name,\n      analysis_id: `${source_name}_${result.meta.date}_${chinese_segment_name}_analysis`,\n      created_at: created_at,\n      meta: {\n        source: source_name,\n        date: result.meta.date,\n        segment: chinese_segment_name,\n        total_messages: 0,\n      },\n      topics_count: 0,\n    };\n  }\n  segments_info[segment_key].topics_count += result.topics.length;\n  segments_info[segment_key].meta.total_messages += (result.meta.total_messages || 0);\n\n  // --- Step 2: Process Topics and Link to the *Correct* Aggregated Metadata ---\n  for (const topic of result.topics) {\n    const topic_seq = topic.topic_seq || [];\n    const message_count = topic_seq.length;\n\n    const topic_data = {\n      physical_id: `topic_${String(topic_counter).padStart(3, '0')}`,\n      original_topic_id: topic.topic_id,\n      topic_title: topic.topic_title,\n      topic_description: topic.topic_description,\n      is_off_topic: topic.is_off_topic,\n      topic_seq: topic_seq,\n      message_count: (topic.message_seqs || []).length,\n      chat_count:  (topic.message_seqs || []).length,\n      topic_start_time: topic.topic_start_time || new Date().toISOString(),\n      topic_end_time: topic.topic_end_time || new Date().toISOString(),\n      source_name: source_name,\n      segment_name: chinese_segment_name,\n      analysis_id: segments_info[segment_key].analysis_id,\n      created_at: created_at,\n      analysis_meta: segments_info[segment_key].meta,\n    };\n\n    all_topics.push(topic_data);\n    topic_counter++;\n  }\n}\n\n// --- Step 3: Final Aggregation for sources_metadata (can be done after the loop) ---\nall_topics.forEach(topic => {\n    if (!sources_info[topic.source_name]) {\n        sources_info[topic.source_name] = { source_name: topic.source_name, segments: [], total_topics: 0 };\n    }\n    if (!sources_info[topic.source_name].segments.includes(topic.segment_name)) {\n        sources_info[topic.source_name].segments.push(topic.segment_name);\n    }\n});\nObject.keys(sources_info).forEach(sourceName => {\n    sources_info[sourceName].total_topics = all_topics.filter(t => t.source_name === sourceName).length;\n});\n\n\n// --- Final Assembly ---\nconst on_topic_count = all_topics.filter(t => !t.is_off_topic).length;\nconst off_topic_count = all_topics.filter(t => t.is_off_topic).length;\nconst total_message_seqs = all_topics.reduce((sum, t) => sum + t.message_count, 0);\nconst total_original_messages = Object.values(segments_info).reduce((sum, s) => sum + s.meta.total_messages, 0);\nconst topics_by_source = Object.entries(sources_info).reduce((acc, [key, value]) => {\n  acc[key] = value.total_topics;\n  return acc;\n}, {});\n\nconst physical_merged = {\n  step: \"2_topic_merged\",\n  description: \"时间分段分析后的所有话题物理合并，未进行语义合并\",\n  merge_timestamp: new Date().toISOString(),\n  merge_date: analysisResults[0]?.meta?.date || new Date().toISOString().split('T')[0],\n  merge_type: \"physical\",\n  total_topics: all_topics.length,\n  total_sources: Object.keys(sources_info).length,\n  total_segments: Object.keys(segments_info).length,\n  all_topics: all_topics,\n  sources_metadata: sources_info,\n  segments_metadata: segments_info,\n  statistics: {\n    on_topic_count,\n    off_topic_count,\n    total_message_seqs,\n    total_original_messages,\n    topics_by_source\n  }\n};\n\nreturn { json: physical_merged };"
      },
      "id": "1ea63cbf-cd4f-4f95-8876-99fbae4b4bd8",
      "name": "Merge & Deduplicate Topics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        920,
        300
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=你是聊天话题智能合并专家。你的核心任务是分析已物理合并的话题列表，找出语义相关的话题，并输出一个包含合并关系和AI总结内容的新JSON。\n\n### 核心合并原则 (必须严格遵守)\n\n1.  **语义为王**: 必须基于话题描述 (`topic_description`) 的**深层语义**进行合并，而不是简单的关键词匹配。例如，“Claude连不上”和“我的Claude今天响应很慢”应该合并，但“Claude使用技巧”和“Gemini使用技巧”则**绝对不能**合并。\n2.  **保守策略**: 宁可保留更多独立的、有价值的小话题，也绝不错误地将不相关的话题合并成一个模糊的大杂烩。如果你没有70%以上的把握，就选择不合并。\n3.  **质量提升**: 合并后的新话题，其标题和描述必须比原始话题更具信息量、更精炼、更能体现讨论的精华。\n\n### 内容生成要求\n\n1.  **合并后标题 (`merged_title`)**: 生成一个全新的、高度概括的、能体现讨论核心的精确标题。\n2.  **合并后描述 (`merged_description`)**: **严格基于**所有被合并话题的**原始内容**进行总结。必须清晰地说明讨论的完整脉络、核心观点、主要问题和结论。**严禁**编造、臆测或添加任何原始对话中不存在的信息。**严禁**出现“合并了X个话题”这种空洞的格式化描述。\n3.  **话题标签 (`topic_tags`)**: 利用你最新的知识库，为每个合并后的话题生成2-4个与时俱进的、业内认可的标签。例如：`RAG`, `Fine-tuning`, `AI Agent`, `Claude 3.5 Sonnet`, `n8n` 等。\n\n### 绝对输出要求 (最重要)\n\n1.  **纯JSON**: **只允许**输出有效的JSON对象。\n2.  **禁止Markdown**: **严禁**在输出的任何位置使用 ` ```json ` 或 ` ``` ` 进行包裹。\n3.  **禁止解释**: **严禁**在JSON对象前后添加任何形式的解释性文字或注释。\n\n---\n### 输出JSON格式 (严格遵守此结构)\n\n你的响应必须是一个有效的 JSON 对象，且只能是 JSON 对象。不要包含任何额外的文本、解释或 Markdown 代码块（例如，```json）。\n\n```json\n{\n  \"merged_topics\": [\n    {\n      \"semantic_topic_id\": \"merged_001\",\n      \"merged_title\": \"基于语义分析的精确标题\",\n      \"merged_description\": \"综合描述：详细说明合并后话题的完整内容脉络、核心观点、讨论范围和主要结论。\",\n      \"is_off_topic\": false,\n      \"semantic_category\": \"讨论类型 (例如: '问题求助', '经验分享', '技术探讨')\",\n      \"topic_tags\": [\"AI生成标签1\", \"AI生成标签2\"],\n      \"merged_from\": [\n        {\n          \"physical_id\": \"被合并的原始话题ID (例如: topic_001)\",\n          \"original_title\": \"被合并的原始话题的标题\"\n        }\n      ],\n      \"relevance_score\": 0.85,\n      \"confidence_level\": \"high\"\n    }\n  ],\n  \"merge_metadata\": {\n    \"merge_algorithm\": \"deep_semantic_analysis\",\n    \"total_merges_performed\": 1,\n    \"compression_achieved\": \"50%\"\n  }\n}\n```\n\n---\n### 待分析的物理合并后的话题数据\n\n{{ JSON.stringify($json) }}",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1220,
        80
      ],
      "id": "f091a273-6475-40a5-b7df-99d4fb12c1f1",
      "name": "AI Semantic Merge"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"merged_topics\": [\n    {\n      \"semantic_topic_id\": \"merged_001\",\n      \"merged_title\": \"基于语义分析的精确标题\",\n      \"merged_description\": \"综合描述：详细说明合并后话题的完整内容脉络、核心观点、讨论范围和主要结论。\",\n      \"is_off_topic\": false,\n      \"semantic_category\": \"讨论类型 (例如: '问题求助', '经验分享', '技术探讨')\",\n      \"topic_tags\": [\"AI生成标签1\", \"AI生成标签2\"],\n      \"merged_from\": [\n        {\n          \"physical_id\": \"被合并的原始话题ID (例如: topic_001)\",\n          \"original_title\": \"被合并的原始话题的标题\"\n        }\n      ],\n      \"relevance_score\": 0.85,\n      \"confidence_level\": \"high\"\n    }\n  ],\n  \"merge_metadata\": {\n    \"merge_algorithm\": \"deep_semantic_analysis\",\n    \"total_merges_performed\": 1,\n    \"compression_achieved\": \"50%\"\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1420,
        400
      ],
      "id": "00c38755-66ab-4e1d-99f4-e096f8c1e2d7",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "content": "## 智能话题归并\n\n- 将相似或相关的话题进行智能合并，形成更宏观、有意义的话题。\n- 将所有处理过的话题数据组装成最终报告所需的结构或内容。\n",
        "height": 740,
        "width": 620,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1160,
        -200
      ],
      "id": "dc05f681-cd26-4761-8823-41101dd488f9",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "jsCode": "// Author: Gemini\n// Date: 2025-07-05\n// Description: This version integrates all_links, active_users, and raw_message_sample\n// from upstream nodes into the final report structure.\n\n/**\n * Robustly maps a segment string to a Chinese time segment name.\n * This function is likely from an upstream node, but included for completeness if needed.\n * @param {string} segmentInput - The segment string, e.g., \"19:30-20:00\" or \"傍晚\".\n * @returns {string} The corresponding Chinese segment name, e.g., \"晚上\".\n */\nfunction mapTimeToChineseSegment(segmentInput) {\n  if (!segmentInput || typeof segmentInput !== 'string') {\n    return \"未知时段\";\n  }\n  const startHour = parseInt(segmentInput.split(':')[0], 10);\n  if (isNaN(startHour)) {\n    return segmentInput;\n  }\n  if (startHour >= 0 && startHour < 6) return \"深夜\";\n  if (startHour >= 6 && startHour < 9) return \"早晨\";\n  if (startHour >= 9 && startHour < 12) return \"上午\";\n  if (startHour >= 12 && startHour < 14) return \"中午\";\n  if (startHour >= 14 && startHour < 18) return \"下午\";\n  if (startHour >= 18 && startHour < 22) return \"晚上\";\n  if (startHour >= 22 && startHour <= 23) return \"深夜\";\n  return \"未知时段\";\n}\n\n// --- Main Logic ---\n\n// Step 1: Get the required data sources\n// $input.first() refers to the first input connected to this node (likely \"AI Semantic Merge\")\nconst aiMergeResult = $input.first().json.output;\n// $('Node Name') refers to data from a specific node by its name\nconst physicalMergeResult = $('Merge & Deduplicate Topics').first().json;\n\n// Get data from the newly added nodes\n// Ensure 'Extract Links & Active Users' is the exact name of your node in n8n\nconst linksAndUsersData = $('Extract Links & Active Users').first().json;\nconst all_links = linksAndUsersData.all_links;\nconst active_users = linksAndUsersData.active_users;\n\n// Ensure 'Prepare Raw Message Sample' is the exact name of your node in n8n\nconst rawSampleData = $('Prepare Raw Message Sample').first().json;\nconst raw_message_sample = rawSampleData.raw_message_sample;\n\n\nif (!aiMergeResult || !physicalMergeResult || !linksAndUsersData || !rawSampleData) {\n  return { json: { error: \"Missing one or more required inputs. Check node connections and names.\" } };\n}\n\n// Step 2: Create a fast lookup map for all original topics\nconst allTopicsMap = new Map(physicalMergeResult.all_topics.map(t => [t.physical_id, t]));\n\n// Step 3: Iterate through the AI's decisions and assemble the enriched topics\nconst enhanced_merged_topics = [];\nfor (const aiTopic of aiMergeResult.merged_topics) {\n  const combined_seqs_nested = [];\n  const seq_source_mapping = {};\n\n  for (const source of aiTopic.merged_from) {\n    const physical_id = source.physical_id;\n    const originalTopic = allTopicsMap.get(physical_id);\n\n    if (originalTopic) {\n      combined_seqs_nested.push(originalTopic.topic_seq);\n      for (const seq of originalTopic.topic_seq) {\n        if (!seq_source_mapping[seq]) {\n          seq_source_mapping[seq] = {\n            source_name: originalTopic.source_name,\n            segment_name: originalTopic.segment_name,\n            analysis_id: originalTopic.analysis_id,\n            topic_start_time: originalTopic.topic_start_time,\n            topic_end_time: originalTopic.topic_end_time\n          };\n        }\n      }\n    }\n  }\n\n  // Flatten combined_seqs_nested and remove duplicates\n  const combined_message_seqs = [...new Set(combined_seqs_nested.flat())].sort((a, b) => a - b);\n\n  // Calculate total_combined_messages and chat_count\n  const total_combined_messages = combined_message_seqs.length;\n  const chat_count = total_combined_messages; // Assuming chat_count is same as message count for now\n\n  // Determine message_time_range\n  let earliest_seq_time = null;\n  let latest_seq_time = null;\n\n  if (combined_message_seqs.length > 0) {\n    // Find the earliest and latest time from the original messages based on seq\n    // This requires access to the original messages from \"Parse & Structure Data\"\n    // For simplicity, we'll use the topic_start_time and topic_end_time from originalTopic\n    // as provided by \"Merge & Deduplicate Topics\" node.\n    // If more granular message-level time is needed, you'd need to pass the full\n    // original messages array or a lookup map from \"Parse & Structure Data\" node.\n\n    // For now, we'll use the min/max of the original topics' start/end times\n    let minTime = Infinity;\n    let maxTime = -Infinity;\n\n    for (const source of aiTopic.merged_from) {\n      const originalTopic = allTopicsMap.get(source.physical_id);\n      if (originalTopic) {\n        const startTime = new Date(originalTopic.topic_start_time).getTime();\n        const endTime = new Date(originalTopic.topic_end_time).getTime();\n        if (startTime < minTime) minTime = startTime;\n        if (endTime > maxTime) maxTime = endTime;\n      }\n    }\n    earliest_seq_time = minTime !== Infinity ? new Date(minTime).toISOString() : null;\n    latest_seq_time = maxTime !== -Infinity ? new Date(maxTime).toISOString() : null;\n  }\n\n\n  enhanced_merged_topics.push({\n    semantic_topic_id: aiTopic.semantic_topic_id,\n    merged_title: aiTopic.merged_title,\n    merged_description: aiTopic.merged_description,\n    is_off_topic: aiTopic.is_off_topic,\n    semantic_category: aiTopic.semantic_category,\n    topic_tags: aiTopic.topic_tags,\n    merged_from: aiTopic.merged_from,\n    relevance_score: aiTopic.relevance_score,\n    confidence_level: aiTopic.confidence_level,\n    combined_message_seqs: combined_message_seqs,\n    total_combined_messages: total_combined_messages,\n    chat_count: chat_count,\n    seq_source_mapping: seq_source_mapping,\n    message_time_range: {\n      earliest_seq: combined_message_seqs.length > 0 ? combined_message_seqs[0] : null,\n      latest_seq: combined_message_seqs.length > 0 ? combined_message_seqs[combined_message_seqs.length - 1] : null,\n      seq_count: combined_message_seqs.length,\n      earliest_time: earliest_seq_time, // Use calculated earliest time\n      latest_time: latest_seq_time // Use calculated latest time\n    }\n  });\n}\n\n// Prepare the final output\nconst now = new Date();\nreturn [{\n  json: {\n    merge_timestamp: now.toISOString(),\n    merge_date: now.toISOString().split('T')[0], // Just the date part\n    merge_type: \"semantic\",\n    original_topics_count: physicalMergeResult.all_topics.length,\n    merged_topics_count: enhanced_merged_topics.length,\n    compression_ratio: (1 - enhanced_merged_topics.length / physicalMergeResult.all_topics.length) * 100,\n    merged_topics: enhanced_merged_topics,\n    merge_metadata: aiMergeResult.merge_metadata,\n    original_statistics: physicalMergeResult.statistics,\n    sources_metadata: physicalMergeResult.sources_metadata,\n    segments_metadata: physicalMergeResult.segments_metadata,\n    global_seq_index: physicalMergeResult.global_seq_index, // Ensure this field exists and is passed\n\n    // Newly added fields\n    all_links: all_links,\n    active_users: active_users,\n    raw_message_sample: raw_message_sample\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        80
      ],
      "id": "0299a2da-cfe5-47ff-9b49-57c387020ae2",
      "name": "Assemble Final Report"
    },
    {
      "parameters": {
        "jsCode": "// 获取AI Agent的输出\nlet aiOutput;\ntry {\n  // 首先检查输入数据结构\n  const inputData = $input.first().json;\n  console.log('Input data structure:', JSON.stringify(inputData, null, 2));\n  \n  // 尝试不同的数据结构路径\n  if (inputData.choices && inputData.choices[0] && inputData.choices[0].message) {\n    // OpenAI API 标准格式\n    aiOutput = inputData.choices[0].message.content;\n  } else if (inputData.message && inputData.message.content) {\n    // 简化的消息格式\n    aiOutput = inputData.message.content;\n  } else if (inputData.content) {\n    // 直接内容格式\n    aiOutput = inputData.content;\n  } else if (inputData.output) {\n    // 输出字段格式\n    aiOutput = inputData.output;\n  } else if (typeof inputData === 'string') {\n    // 纯字符串格式\n    aiOutput = inputData;\n  } else {\n    // 如果都找不到，尝试找到第一个字符串值\n    const findStringValue = (obj) => {\n      if (typeof obj === 'string') return obj;\n      if (Array.isArray(obj)) {\n        for (const item of obj) {\n          const result = findStringValue(item);\n          if (result) return result;\n        }\n      } else if (typeof obj === 'object' && obj !== null) {\n        for (const key in obj) {\n          const result = findStringValue(obj[key]);\n          if (result) return result;\n        }\n      }\n      return null;\n    };\n    \n    aiOutput = findStringValue(inputData);\n    \n    if (!aiOutput) {\n      throw new Error('无法在输入数据中找到AI输出内容');\n    }\n  }\n  \n  console.log('Found AI output:', aiOutput.substring(0, 200) + '...');\n  \n} catch (error) {\n  console.error('获取AI输出时出错:', error);\n  return [{\n    json: {\n      error: '无法获取AI输出: ' + error.message,\n      inputData: $input.first().json,\n      status: 'error'\n    }\n  }];\n}\n\n// 清理可能的markdown标记\nlet htmlContent = aiOutput;\nif (htmlContent.includes('```html')) {\n  htmlContent = htmlContent.replace(/```html\\n?/g, '').replace(/\\n?```/g, '');\n}\nif (htmlContent.includes('```')) {\n  htmlContent = htmlContent.replace(/```\\n?/g, '').replace(/\\n?```/g, '');\n}\n\n// 获取群聊名称和日期（从工作流输入或设置默认值）\nconst groupName = $('ConfigureChatParameters').first().json.group_name || 'unknown';\nconst date = $('ConfigureChatParameters').first().json.date || new Date().toISOString().split('T')[0];\n\nconsole.log('群聊信息:', { groupName, date });\n\n// 🔥 改进：智能HTML内容清理 - 保护图表和脚本内容\nconsole.log('开始HTML清理，原始长度:', htmlContent.length);\n\n// 智能清理HTML内容，保护重要的代码区域\nconst smartCleanHtmlForMCP = (html) => {\n  // 1. 首先保护重要的代码区域\n  const protectedSections = [];\n  let cleanedHtml = html;\n  \n  // 保护 script 标签内容（包括 mermaid, chart.js 等）\n  cleanedHtml = cleanedHtml.replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, (match, offset) => {\n    const placeholder = `__PROTECTED_SCRIPT_${protectedSections.length}__`;\n    protectedSections.push(match);\n    return placeholder;\n  });\n  \n  // 保护 style 标签内容\n  cleanedHtml = cleanedHtml.replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, (match, offset) => {\n    const placeholder = `__PROTECTED_STYLE_${protectedSections.length}__`;\n    protectedSections.push(match);\n    return placeholder;\n  });\n  \n  // 保护 pre 标签内容（可能包含图表定义）\n  cleanedHtml = cleanedHtml.replace(/<pre[^>]*>[\\s\\S]*?<\\/pre>/gi, (match, offset) => {\n    const placeholder = `__PROTECTED_PRE_${protectedSections.length}__`;\n    protectedSections.push(match);\n    return placeholder;\n  });\n  \n  // 保护具有特殊class的div（如mermaid图表容器）\n  cleanedHtml = cleanedHtml.replace(/<div[^>]*class=\"[^\"]*(?:mermaid|chart|graph|diagram)[^\"]*\"[^>]*>[\\s\\S]*?<\\/div>/gi, (match, offset) => {\n    const placeholder = `__PROTECTED_CHART_${protectedSections.length}__`;\n    protectedSections.push(match);\n    return placeholder;\n  });\n  \n  // 2. 对其余内容进行清理\n  cleanedHtml = cleanedHtml\n    // 只清理普通的换行符和制表符，但保留必要的格式\n    .replace(/[\\r]/g, '')           // 移除回车符\n    .replace(/\\n\\s*\\n/g, '\\n')      // 将多个换行合并为一个\n    .replace(/\\t/g, '  ')           // 将制表符转换为两个空格\n    // 清理HTML标签间的多余空格，但不影响文本内容\n    .replace(/>\\s+</g, '><')\n    // 清理行首行尾空格\n    .replace(/^\\s+|\\s+$/gm, '')\n    // 将多个连续空格合并，但保留单个换行\n    .replace(/ +/g, ' ');\n  \n  // 3. 恢复受保护的内容\n  protectedSections.forEach((section, index) => {\n    const scriptPlaceholder = `__PROTECTED_SCRIPT_${index}__`;\n    const stylePlaceholder = `__PROTECTED_STYLE_${index}__`;\n    const prePlaceholder = `__PROTECTED_PRE_${index}__`;\n    const chartPlaceholder = `__PROTECTED_CHART_${index}__`;\n    \n    cleanedHtml = cleanedHtml.replace(scriptPlaceholder, section);\n    cleanedHtml = cleanedHtml.replace(stylePlaceholder, section);\n    cleanedHtml = cleanedHtml.replace(prePlaceholder, section);\n    cleanedHtml = cleanedHtml.replace(chartPlaceholder, section);\n  });\n  \n  // 4. 最后只对JSON传输做必要的转义\n  return cleanedHtml\n    .replace(/\\\\/g, '\\\\\\\\')    // 转义反斜杠\n    .replace(/\"/g, '\\\\\"');     // 转义双引号\n};\n\n// 应用智能清理\nconst originalHtmlContent = htmlContent;\nhtmlContent = smartCleanHtmlForMCP(htmlContent);\n\nconsole.log('智能HTML清理完成');\nconsole.log('- 原始长度:', originalHtmlContent.length);\nconsole.log('- 清理后长度:', htmlContent.length);\nconsole.log('- 节省空间:', originalHtmlContent.length - htmlContent.length, 'bytes');\n\n// 检查是否包含图表相关内容\nconst hasCharts = originalHtmlContent.match(/(mermaid|chart\\.js|echarts|d3\\.js|plotly|canvas|svg)/i);\nif (hasCharts) {\n  console.log('✅ 检测到图表内容，已应用保护性清理');\n} else {\n  console.log('ℹ️ 未检测到图表内容');\n}\n\n// 验证HTML文档完整性\nif (!htmlContent.includes('<!DOCTYPE html>')) {\n  console.error('AI输出不是完整的HTML文档');\n  return [{\n    json: {\n      error: 'AI输出不是完整的HTML文档',\n      receivedContent: htmlContent.substring(0, 500),\n      status: 'error'\n    }\n  }];\n}\n\n// 额外的HTML内容验证\nconst validateHtml = (html) => {\n  const checks = {\n    hasDoctype: html.includes('<!DOCTYPE html>'),\n    hasHtmlTag: html.includes('<html') && html.includes('</html>'),\n    hasHeadTag: html.includes('<head') && html.includes('</head>'),\n    hasBodyTag: html.includes('<body') && html.includes('</body>'),\n    hasTitle: html.includes('<title'),\n    isNotEmpty: html.length > 100,\n    hasChartLibraries: /(?:mermaid|chart\\.js|echarts|d3\\.js|plotly)/i.test(html)\n  };\n  \n  const passed = Object.values(checks).filter(Boolean).length;\n  const total = Object.keys(checks).length;\n  \n  console.log('HTML验证结果:', checks);\n  console.log(`HTML质量评分: ${passed}/${total}`);\n  \n  return { checks, score: passed / total };\n};\n\nconst validation = validateHtml(htmlContent);\n\n// 生成文件名 - 使用群聊名称和日期\nconst filename = `群聊日报-${groupName}-${date}.html`;\nconst safeFilename = filename.replace(/[^a-z0-9\\u4e00-\\u9fa5_\\-\\.]/gi, '_');\n\nconsole.log('文件名生成:', { \n  original: filename, \n  safe: safeFilename,\n  groupName: groupName,\n  date: date \n});\n\n// 生成清理后的HTML用于MCP工具\nconst mcpReadyHtml = htmlContent;\n\n// 计算处理时长\nlet processDuration = null;\ntry {\n  const startTime = $('验证输入参数').item.json.process_start_time;\n  if (startTime) {\n    const startDate = new Date(startTime);\n    const endDate = new Date();\n    // 计算秒数差\n    processDuration = Math.round((endDate - startDate) / 1000);\n  }\n} catch (e) {\n  console.log('计算处理时长失败:', e.message);\n  processDuration = null;\n}\n\n\n// 返回处理结果 - 包含两个版本的HTML\nreturn [{\n  json: {\n    // 原始HTML（用于文件保存）\n    htmlContent: originalHtmlContent,\n    // 清理后的HTML（用于MCP工具调用）\n    mcpHtmlContent: mcpReadyHtml,\n    // 文件信息 - 使用群聊名称\n    filename: safeFilename,\n    originalFilename: filename,\n    groupName: groupName,\n    date: date,\n    process_end_time: $now.toISO(),\n    process_duration: processDuration,\n    timestamp: new Date().toISOString(),\n    status: 'success',\n    // 统计信息\n    originalContentLength: originalHtmlContent.length,\n    cleanedContentLength: mcpReadyHtml.length,\n    compressionRatio: ((originalHtmlContent.length - mcpReadyHtml.length) / originalHtmlContent.length * 100).toFixed(2) + '%',\n    // HTML质量信息\n    htmlValidation: validation,\n    hasChartContent: hasCharts !== null,\n    // 调试信息\n    processingSteps: [\n      '✅ AI输出解析成功',\n      '✅ Markdown清理完成', \n      '✅ 智能HTML清理完成（保护图表）',\n      '✅ MCP格式优化完成',\n      `✅ HTML验证完成 (${(validation.score * 100).toFixed(1)}%)`,\n      `✅ 文件名生成完成: ${safeFilename}`\n    ]\n  },\n  binary: {\n    data: {\n      data: Buffer.from(originalHtmlContent, 'utf8').toString('base64'),\n      mimeType: 'text/html',\n      fileName: safeFilename,\n      fileExtension: 'html'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2200,
        80
      ],
      "id": "699fd2d2-fdc8-4bd7-9a14-1db30edd2229",
      "name": "处理AI输出"
    },
    {
      "parameters": {
        "content": "## 最终HTML内容处理\n",
        "height": 740,
        "width": 780,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1820,
        -200
      ],
      "id": "59446f38-5c4e-4778-a707-95c396cccc60",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "jsCode": "// Node: Extract Links & Active Users\n// Input: Output from \"Parse & Structure Data\" node (single JSON object with sources.messages)\n// Output: JSON with all_links array (objects with url, sender, time, context) and active_users array\n\nconst inputData = $input.first().json; // Get the single item from \"Parse & Structure Data\"\n\n\nif (!inputData || !inputData.sources) {\n  console.log(\"Input data is missing structuredData or sources field.\");\n  return { json: { all_links: [], active_users: [] } };\n}\n\n// Assuming only one source, get its messages list\nconst sourceName = Object.keys(inputData.sources)[0];\nconst allMessages = inputData.sources[sourceName].messages;\n\nif (!allMessages || allMessages.length === 0) {\n  console.log(\"No messages found in structured data.\");\n  return { json: { all_links: [], active_users: [] } };\n}\n\nconst allLinks = []; // Now an array of objects\nconst senderMessageCounts = {}; // Store message counts for active users\n\n// Regex for raw URLs (http or https)\nconst rawUrlRegex = /(https?:\\/\\/[^\\s]+)/g;\n// Regex for [链接|URL] format\nconst formattedLinkRegex = /\\[链接\\|(https?:\\/\\/[^\\]]+)\\]/g;\n\nconsole.log(`Processing ${allMessages.length} messages.`);\n\nfor (const message of allMessages) {\n  const senderName = message.sender_name;\n  const messageTime = message.time;\n  const messageContent = message.content;\n\n  //console.log(`--- Processing Message ---`);\n  //console.log(`Raw senderName: '${senderName}'`);\n  //console.log(`Message content: '${messageContent}'`);\n\n  // Check senderName validity for active users\n  const isValidSender = senderName && senderName.trim() !== '' && senderName !== '系统消息';\n  \n\n  if (messageContent) {\n    const extractedUrls = []; // Temporarily store all URLs found in this message\n    let linkMatch;\n    \n    // Extract raw URLs\n    rawUrlRegex.lastIndex = 0; // Reset regex lastIndex for global regex\n    while ((linkMatch = rawUrlRegex.exec(messageContent)) !== null) {\n      extractedUrls.push(linkMatch[0]);\n    }\n\n    // Extract formatted links [链接|URL]\n    formattedLinkRegex.lastIndex = 0; // Reset regex lastIndex for global regex\n    while ((linkMatch = formattedLinkRegex.exec(messageContent)) !== null) {\n      extractedUrls.push(linkMatch[1]);\n    }\n\n    for (const url of extractedUrls) {\n      // Check if this URL is part of an image or video markdown\n      const isImageOrVideoLink = messageContent.includes(`![图片]`) || messageContent.includes(`![视频]`);\n      if (!isImageOrVideoLink) {\n        //console.log(`Found valid link: ${url}`);\n        allLinks.push({\n          url: url,\n          sender: senderName,\n          time: messageTime,\n          context: messageContent\n        });\n      } else {\n        console.log(`Excluded image/video link: ${url}`);\n      }\n    }\n  }\n\n  // Count active users (only for valid senders)\n  if (isValidSender) {\n    //console.log(`Counting message for sender: ${senderName}`);\n    senderMessageCounts[senderName] = (senderMessageCounts[senderName] || 0) + 1;\n  }\n}\n\nconsole.log(`Final allLinks count: ${allLinks.length}`);\nconsole.log(`Final activeUsers count: ${Object.keys(senderMessageCounts).length}`);\n\n// Convert senderMessageCounts to active_users array and sort\nconst activeUsers = Object.entries(senderMessageCounts)\n  .map(([sender_name, message_count]) => ({ sender_name, message_count }))\n  .sort((a, b) => b.message_count - a.message_count); // Sort in descending order by message_count\n\nreturn [{\n  json: {\n    all_links: allLinks,\n    active_users: activeUsers\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        -100
      ],
      "id": "63f36a48-ba52-4392-9a16-e66a0d41ce6c",
      "name": "Extract Links & Active Users"
    },
    {
      "parameters": {
        "jsCode": "// Node: Prepare Raw Message Sample\n// Input: Output from \"Parse & Structure Data\" node (单个 JSON 对象，包含 sources.messages)\n// Output: JSON with raw_message_sample 数组\n\nconst structuredData = $('Parse & Structure Data').first().json; // 获取上游节点的单个数据项\n\nif (!structuredData || !structuredData.sources) {\n  console.log(\"输入数据缺少 structuredData 或 sources 字段。\");\n  return { json: { raw_message_sample: [] } };\n}\n\n// 假设只有一个 source，获取其消息列表\nconst sourceName = Object.keys(structuredData.sources)[0];\nconst allMessages = structuredData.sources[sourceName].messages;\n\nif (!allMessages || allMessages.length === 0) {\n  console.log(\"结构化数据中未找到消息。\");\n  return { json: { raw_message_sample: [] } };\n}\n\n// 提取消息样本。\n// 你可以根据需要调整采样逻辑（例如，随机采样，更多消息）。\nconst rawMessageSample = allMessages.map(msg => ({\n  sender_name: msg.sender_name,\n  time: msg.time,\n  content: msg.content\n}));\n\nreturn [{\n  json: {\n    raw_message_sample: rawMessageSample\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        -100
      ],
      "id": "46a817d3-6fb4-4d3e-b991-3b098d0bb005",
      "name": "Prepare Raw Message Sample"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6dab17d2-2e5e-40e3-b5d9-0abcdac0dde8",
              "name": "date",
              "value": "={{ $now.minus({days: 1}).format('yyyy-MM-dd') }}",
              "type": "string"
            },
            {
              "id": "c2a2eec2-4ead-4544-83db-73aba917f553",
              "name": "group_name",
              "value": "n8n自动化实战交流群",
              "type": "string"
            },
            {
              "id": "0bcb4528-e474-4fe9-ada8-ebc125a809be",
              "name": "group_owner",
              "value": "LQ",
              "type": "string"
            },
            {
              "id": "d98a1539-81e4-45d3-8602-e81815516a7c",
              "name": "web_style_template",
              "value": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>[在此处填写报告标题] - [日期]</title>\n    <link rel=\"stylesheet\" href=\"https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/tailwindcss/2.2.19/tailwind.min.css\">\n    <link rel=\"stylesheet\" href=\"https://lf6-cdn-tos.bytecdntp.com/cdn/expire-100-M/font-awesome/6.0.0/css/all.min.css\">\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\" integrity=\"sha512-BNaRQnYJYiPSqHHDb58B0yaPfCu+Wgds8Gp/gU33kqBtgNS4tSPHuGibyoVBL5rLesXWW/sGuLhYFChxgYnz2Q==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" onerror=\"this.onerror=null;this.src='https://unpkg.com/html2canvas@1.4.1/dist/html2canvas.min.js';\"></script>\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script>\n    <style>\n        /* CSS变量定义 */\n        :root {\n            /* 主题颜色配置 */\n            --bg-primary: #F5F5EE; /* 主背景色 - 米白色 */\n            --bg-secondary: #faf9f6; /* 次背景色 - 卡片背景 */\n            --bg-tertiary: #f1f3f5; /* 第三背景色 - 标签等 */\n            --text-primary: #212529; /* 主要文字颜色 */\n            --text-secondary: #495057; /* 次要文字颜色 */\n            --accent-primary: #FB651E; /* 主要强调色 - 橙色 */\n            --accent-secondary: #ff8906; /* 次要强调色 */\n            --accent-tertiary: #e8590c; /* 第三强调色 */\n            --accent-blue: #007EFF;     /* 蓝色强调 */\n            --accent-purple: #7048e8; /* 紫色强调 */\n            --accent-cyan: #10B981;     /* 青色强调 */\n            --highlight-keyword-bg: #ffe8cc; /* 关键词高亮背景 */\n            --highlight-name-color: #7048e8; /* 人名高亮颜色 */\n            --highlight-group-name-bg: var(--highlight-keyword-bg); /* AI产品蝗虫团高亮背景色 - Updated */\n\n\n            /* 布局与样式变量 */\n            --card-padding: 24px; /* 卡片内边距 */\n            --grid-gap: 16px; /* 网格间距 */\n            --card-radius: 12px; /* 卡片圆角 */\n            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.05); /* 卡片阴影 */\n            --font-family: 'Inter', 'SF Pro Display', 'Segoe UI', sans-serif; /* 字体栈 */\n\n            /* KityMinder自定义主题颜色 */\n            --km-orange: #FB651E;     /* KityMinder橙色，用于一级节点 */\n            --km-blue: #007EFF;       /* KityMinder蓝色，用于二级节点 */\n            --km-lightblue: #10B981;  /* KityMinder浅蓝色，用于三级节点 */\n            --km-root-bg: #f0f0f0;     /* KityMinder根节点背景 */\n            --km-root-stroke: var(--km-root-bg); /* KityMinder根节点边框 */\n            --km-root-text: #333333;   /* KityMinder根节点文字颜色 */\n            --km-node-text: #ffffff;   /* KityMinder普通节点文字颜色 */\n            --km-connect-color: #777777; /* KityMinder连接线颜色 */\n        }\n\n        /* 全局重置和基础样式 */\n        * {\n            margin: 0; /* 清除外边距 */\n            padding: 0; /* 清除内边距 */\n            box-sizing: border-box; /* 使用border-box盒模型 */\n        }\n\n        body {\n            font-family: var(--font-family); /* 应用定义的字体栈 */\n            background-color: var(--bg-primary); /* 设置页面背景色 */\n            color: var(--text-primary); /* 设置主要文字颜色 */\n            line-height: 1.6; /* 设置行高 */\n            font-size: 16px; /* 设置基础字号 */\n            width: 100%; /* 页面宽度占满父容器 */\n            max-width: 1000px; /* 内容最大宽度 */\n            margin: 0 auto; /* 内容居中显示 */\n            padding: 20px; /* 页面内边距 */\n        }\n        body.modal-active { /* 当模态框激活时，禁止页面滚动 */\n            overflow: hidden;\n        }\n\n        /* 标题样式 */\n        h1, h2, h3, h4 {\n            font-weight: 600; /* 标题字重 */\n            letter-spacing: 0.5px; /* 字符间距 */\n        }\n\n        h1 { /* 主标题样式 */\n            font-size: 2.5rem;\n            margin-bottom: 0.5rem;\n            color: var(--accent-primary);\n        }\n\n        h2 { /* 二级标题样式 */\n            font-size: 1.75rem;\n            margin-bottom: 1rem;\n            color: var(--accent-primary);\n        }\n\n        h3 { /* 三级标题样式 */ \n            font-size: 1.25rem;\n            margin-bottom: 0.75rem;\n            color: var(--accent-blue);\n        }\n        \n        /*网格容器布局 */\n        .grid-container {\n            display: grid; /* 使用CSS Grid布局 */\n            grid-template-columns: repeat(12, 1fr); /* 12列网格系统 */\n            grid-auto-rows: minmax(150px, auto); /* 增加行高最小值以防止压缩 */\n            gap: var(--grid-gap); /* 网格间距 */\n            margin-top: 20px; /* 与上方元素的间距 */\n            grid-template-areas:\n                \"main      main      main      main      main      main      main      main      main      main      main      main\"\n                \"topics    topics    topics    topics    topics    topics    topics    topics    topics    topics    topics    topics\"\n                \"mindmap   mindmap   mindmap   mindmap   mindmap   mindmap   mindmap   mindmap   mindmap   mindmap   mindmap   mindmap\"\n                \"quote     quote     quote     quote     quote     quote     links     links     links     links     links     links\"\n                \"bottom_row bottom_row bottom_row bottom_row bottom_row bottom_row bottom_row bottom_row bottom_row bottom_row bottom_row bottom_row\";\n        }\n\n        /* 卡片通用样式 */\n        .card {\n            background-color: var(--bg-secondary); \n            border-radius: var(--card-radius); \n            padding: var(--card-padding); \n            box-shadow: var(--card-shadow); \n            position: relative; \n            overflow: hidden; \n            transition: transform 0.3s ease, box-shadow 0.3s ease; \n            display: flex; \n            flex-direction: column; \n        }\n\n        .card:hover { \n            transform: translateY(-5px); \n            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1); \n        }\n\n        .card::before { \n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 3px;\n            background: var(--accent-primary);\n        }\n\n        .card-icon { \n            position: absolute;\n            bottom: var(--card-padding);\n            right: var(--card-padding);\n            font-size: 4rem; \n            opacity: 0.07; \n            color: var(--accent-primary); \n            z-index: 0; \n        }\n\n        /* 网格区域分配 */\n        .main-card { grid-area: main; }\n        .topic-cards-wrapper {\n            grid-area: topics;\n            display: grid;\n            grid-template-columns: repeat(12, 1fr);\n            gap: var(--grid-gap);\n            width: 100%; /* 确保容器占满网格区域 */\n            min-height: 300px; /* 设置最小高度防止过度压缩 */\n            align-items: start; /* 防止卡片被拉伸变形 */\n        }\n        .mindmap-card-container { grid-area: mindmap; }\n        .quote-card { grid-area: quote; }\n        .links-card { grid-area: links; }\n        .stats-wordcloud-row {\n            grid-area: bottom_row;\n            display: flex;\n            gap: var(--grid-gap);\n            align-items: stretch; /* Ensures cards in the row stretch to the same height */\n        }\n\n\n        .stats-card {\n            flex-grow: 7; /* Takes 7 parts of the available space */\n            flex-shrink: 1; /* Allows shrinking if needed */\n            flex-basis: 0; /* Initial size before distributing space */\n            min-width: 0; /* Allows shrinking below content size if necessary */\n        }\n        .wordcloud-card {\n            flex-grow: 5; /* Takes 5 parts of the available space */\n            flex-shrink: 1;\n            flex-basis: 0;\n            min-width: 0;\n            max-width: 50%; /* Limits wordcloud card width on larger screens */\n        }\n\n        /* 主题卡片样式 */\n        .topic-card {\n            grid-column: span 6; /* Each topic card spans 6 columns on desktop */\n            min-height: 300px; /* 增加最小高度以防止压缩 */\n            width: 100%; /* 确保卡片占满分配的网格空间 */\n            box-sizing: border-box; /* 包含边框和内边距在宽度计算内 */\n        }\n        .topic-card > .topic-card-content-wrapper {\n            flex-grow: 1; /* Allows content to take available vertical space */\n            padding-bottom: 1rem; /* Space at the bottom of the content */\n        }\n        /* 智能话题卡片布局 - 偶数成对，奇数最后一个独占整行 */\n        .topic-cards-wrapper > .topic-card:nth-last-child(1):nth-child(odd) {\n            grid-column: 1 / -1; /* 最后一个奇数卡片从第1列跨越到最后一列（100%宽度） */\n        }\n\n        /* 主卡片内部元素样式 */\n        .main-card h1 { text-align: center; }\n        .main-card .date { text-align: center; }\n        .date { font-size: 1.1rem; color: var(--text-secondary); margin-bottom: 1rem; }\n        .meta-info { display: flex; flex-wrap: wrap; gap: 15px; margin-bottom: 1rem; justify-content: center; }\n        .meta-info span { background-color: var(--bg-tertiary); padding: 5px 10px; border-radius: 20px; font-size: 0.9rem; color: var(--accent-blue); }\n        .summary { margin-top: 1rem; line-height: 1.7; text-align: left; }\n\n\n\n\n        .topic-category { display: inline-block; background-color: var(--accent-tertiary); color: var(--bg-primary); padding: 3px 8px; border-radius: 4px; font-size: 0.8rem; margin-bottom: 0.5rem; }\n                    .topic-tags { display: flex; flex-wrap: wrap; gap: 8px; margin-top: 0.75rem; margin-bottom: 0.75rem; }\n            .tag { background-color: var(--bg-tertiary); color: var(--accent-primary); padding: 3px 8px; border-radius: 4px; font-size: 0.8rem; font-weight: 500; }\n        .highlight-keyword { background-color: var(--highlight-keyword-bg); padding: 1px 2px; border-radius: 2px; font-weight: 500; display: inline; line-height: 1.2; box-decoration-break: clone; -webkit-box-decoration-break: clone; }\n        .highlight-name { color: var(--highlight-name-color); font-weight: 500; }\n        .topic-chat-count { font-size: 0.9rem; color: var(--text-secondary); }\n\n        /* 话题讨论容器样式 */\n        .topic-discussion-container { margin: 0.5rem 0; }\n        .topic-description { margin-bottom: 0.6rem; }\n        .topic-description p { margin: 0; line-height: 1.4; font-size: 0.9rem; color: var(--text-secondary); }\n        \n        .chat-conversation { \n            background-color: rgba(251, 101, 30, 0.02);\n            border: 1px solid rgba(251, 101, 30, 0.08);\n            border-radius: 4px; \n            padding: 0.75rem; \n            margin-top: 0.5rem; \n        }\n        \n        .chat-message { \n            margin-bottom: 0.5rem; \n            padding: 0.3rem 0;\n            border-bottom: 1px solid rgba(251, 101, 30, 0.06);\n            position: relative;\n        }\n        .chat-message:last-child { \n            margin-bottom: 0; \n            border-bottom: none;\n        }\n        \n        .message-header {\n            display: flex;\n            align-items: baseline;\n            gap: 8px;\n            margin-bottom: 0.25rem;\n        }\n        \n        .message-author { \n            color: var(--highlight-name-color); \n            font-weight: 600; \n            font-size: 0.85rem;\n            flex-shrink: 0;\n        }\n        \n        .message-time {\n            color: var(--text-secondary);\n            font-size: 0.7rem;\n            font-weight: 400;\n            opacity: 0.6;\n            transition: opacity 0.2s ease;\n            flex-shrink: 0;\n            position: relative;\n        }\n        \n        .message-time:hover {\n            opacity: 1;\n        }\n        \n        .message-time.relative-time::after {\n            content: attr(data-full-time);\n            position: absolute;\n            bottom: 100%;\n            left: 50%;\n            transform: translateX(-50%);\n            background-color: rgba(0, 0, 0, 0.8);\n            color: white;\n            padding: 4px 8px;\n            border-radius: 4px;\n            font-size: 0.65rem;\n            white-space: nowrap;\n            opacity: 0;\n            pointer-events: none;\n            transition: opacity 0.2s ease;\n            z-index: 1000;\n            margin-bottom: 4px;\n        }\n        \n        .message-time.relative-time:hover::after {\n            opacity: 1;\n        }\n        \n        .message-content { \n            color: var(--text-primary); \n            line-height: 1.4; \n            font-size: 0.85rem;\n            display: block;\n            border-left: 2px solid var(--accent-primary);\n            background-color: var(--bg-secondary);\n            padding: 0.4rem 0.6rem;\n            border-radius: 2px;\n            margin-left: 0.75rem;\n        }\n        \n        /* 时间分组和跨度提示样式 */\n        .time-divider {\n            display: flex;\n            align-items: center;\n            margin: 1rem 0 0.75rem 0;\n            text-align: center;\n        }\n        \n        .time-divider::before,\n        .time-divider::after {\n            content: '';\n            flex: 1;\n            height: 1px;\n            background: linear-gradient(to right, transparent, rgba(251, 101, 30, 0.2), transparent);\n        }\n        \n        .time-divider-text {\n            padding: 0 12px;\n            color: var(--text-secondary);\n            font-size: 0.75rem;\n            font-weight: 500;\n            background-color: var(--bg-secondary);\n            border-radius: 12px;\n            padding: 2px 10px;\n            border: 1px solid rgba(251, 101, 30, 0.1);\n        }\n        \n        /* 话题时间跨度提示 - 低优先级扁平设计 */\n        .topic-time-span {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 6px;\n            margin: 0.5rem 0 0.5rem 0;\n            padding: 4px 8px;\n            background-color: rgba(251, 101, 30, 0.08);\n            color: var(--text-secondary);\n            border: 1px solid rgba(251, 101, 30, 0.15);\n            border-radius: 8px;\n            font-size: 0.7rem;\n            font-weight: 400;\n            text-align: center;\n        }\n        \n        .topic-time-span .time-icon {\n            font-size: 0.7rem;\n            opacity: 0.7;\n        }\n        \n        .topic-time-span .time-range {\n            font-weight: 500;\n        }\n        \n        .topic-time-span .aggregated-label {\n            opacity: 0.8;\n            font-size: 0.65rem;\n        }\n        \n        /* 时间跳跃指示器 */\n        .time-jump-indicator {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 6px;\n            margin: 0.75rem 0;\n            padding: 6px 12px;\n            background-color: rgba(255, 152, 0, 0.1);\n            border: 1px solid rgba(255, 152, 0, 0.2);\n            border-radius: 12px;\n            color: #e65100;\n            font-size: 0.7rem;\n            font-weight: 500;\n            text-align: center;\n        }\n        \n        .time-jump-indicator .jump-icon {\n            font-size: 0.75rem;\n            opacity: 0.8;\n        }\n        \n        .time-jump-indicator .jump-text {\n            font-weight: 600;\n        }\n\n        .quote { position: relative; padding-left: 20px; margin: 10px 0; font-style: italic; color: var(--text-secondary); }\n        .quote::before { content: '\"'; position: absolute; left: 0; top: 0; font-size: 1.5rem; color: var(--accent-tertiary); }\n        .quote-author { text-align: right; font-size: 0.9rem; color: var(--accent-tertiary); margin-top: 5px; }\n\n        .link-item { display: flex; align-items: center; margin-bottom: 10px; padding: 8px; border-radius: 6px; background-color: var(--bg-tertiary); transition: background-color 0.2s ease; text-decoration: none; }\n        .link-item:hover { background-color: rgba(0, 123, 255, 0.1); }\n        .link-item a { text-decoration: none; color: inherit; display: flex; align-items: center; width: 100%; }\n        .link-item a:hover .link-title { text-decoration: underline; color: var(--accent-blue); }\n        .link-icon { margin-right: 10px; color: var(--accent-blue); }\n        .link-title { flex-grow: 1; color: var(--text-primary); }\n        .link-title.is-link { color: var(--accent-blue); }\n        .link-title.is-link:hover { text-decoration: underline; }\n\n        .user-stats-table { width: 100%; border-collapse: collapse; margin-top: 0.5rem; }\n        .user-stats-table th { text-align: center; padding: 0.75rem 0.5rem; border-bottom: 2px solid var(--accent-primary); color: var(--text-primary); font-weight: 600; font-size: 0.9rem; }\n        .user-stats-table td { padding: 0.75rem 0.5rem; border-bottom: 1px solid var(--bg-tertiary); color: var(--text-secondary); font-size: 0.85rem; vertical-align: top; text-align: left; }\n        .user-stats-table .user-name-col { width: 25%; font-weight: 500; word-break: break-all; }\n        .user-stats-table .message-count-col { text-align: center; width: 15%; white-space: nowrap; }\n        .user-stats-table .contribution-col { width: 60%; word-break: break-all; }\n        .user-stats-table tr:last-child td { border-bottom: none; }\n\n        .wordcloud { display: flex; flex-wrap: wrap; justify-content: center; gap: 10px; padding: 20px 0; }\n        .wordcloud-item { padding: 5px 10px; border-radius: 4px; font-weight: 500; transition: transform 0.2s ease; }\n        .wordcloud-item:hover { transform: scale(1.1); }\n        .size-1 { font-size: 0.9rem; color: var(--text-secondary); }\n        .size-2 { font-size: 1.1rem; color: var(--accent-cyan); }\n        .size-3 { font-size: 1.3rem; color: var(--accent-blue); }\n        .size-4 { font-size: 1.5rem; color: var(--accent-purple); }\n        .size-5 { font-size: 1.8rem; color: var(--accent-tertiary); }\n\n        /* 查看更多聊天记录功能样式 - 现代化重新设计 */\n        .expandable-messages-container {\n            margin-top: 0.75rem;\n        }\n        \n        /* 展开区域容器 - 现代化设计 */\n        .expanded-messages-area {\n            background: linear-gradient(145deg, #f8fafc 0%, #f1f5f9 100%);\n            border: 1px solid #e2e8f0;\n            border-radius: 12px;\n            margin: 0.75rem 0;\n            padding: 0;\n            position: relative;\n            box-shadow: \n                0 1px 3px rgba(0, 0, 0, 0.05),\n                0 1px 2px rgba(0, 0, 0, 0.1);\n            overflow: hidden;\n            transition: all 0.3s ease;\n        }\n        \n        .expanded-messages-area::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 3px;\n            background: linear-gradient(90deg, #3b82f6, #8b5cf6, #06b6d4);\n            border-radius: 12px 12px 0 0;\n        }\n        \n        /* 展开区域标题 - 现代化设计 */\n        .expanded-area-header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            padding: 1rem 1.25rem 0.75rem 1.25rem;\n            margin-bottom: 0;\n            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);\n            border-bottom: 1px solid #e2e8f0;\n        }\n        \n        .expanded-area-title {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            color: #475569;\n            font-size: 0.875rem;\n            font-weight: 600;\n            letter-spacing: -0.025em;\n        }\n        \n        .expanded-area-title .icon {\n            font-size: 1rem;\n            color: #3b82f6;\n        }\n        \n        .expanded-area-progress {\n            color: #64748b;\n            font-size: 0.75rem;\n            background: linear-gradient(145deg, #f1f5f9, #e2e8f0);\n            padding: 4px 10px;\n            border-radius: 6px;\n            border: 1px solid #cbd5e1;\n            font-weight: 500;\n        }\n        \n        /* 展开消息内容区域 */\n        .expanded-messages-content {\n            padding: 1rem 1.25rem;\n            max-height: 60vh;\n            overflow-y: auto;\n            scrollbar-width: thin;\n            scrollbar-color: #cbd5e1 #f1f5f9;\n        }\n        \n        .expanded-messages-content::-webkit-scrollbar {\n            width: 6px;\n        }\n        \n        .expanded-messages-content::-webkit-scrollbar-track {\n            background: #f1f5f9;\n            border-radius: 3px;\n        }\n        \n        .expanded-messages-content::-webkit-scrollbar-thumb {\n            background: #cbd5e1;\n            border-radius: 3px;\n        }\n        \n        .expanded-messages-content::-webkit-scrollbar-thumb:hover {\n            background: #94a3b8;\n        }\n        \n        /* 展开消息的现代化样式 */\n        .expanded-message {\n            background: #ffffff;\n            border: 1px solid #e2e8f0;\n            border-radius: 8px;\n            padding: 0.875rem;\n            margin-bottom: 0.75rem;\n            position: relative;\n            transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n        }\n        \n        .expanded-message:hover {\n            background: #fefefe;\n            border-color: #cbd5e1;\n            transform: translateY(-1px);\n            box-shadow: \n                0 4px 6px rgba(0, 0, 0, 0.05),\n                0 1px 3px rgba(0, 0, 0, 0.1);\n        }\n        \n        .expanded-message:last-child {\n            margin-bottom: 0;\n        }\n        \n        /* 展开消息头部 - 现代化设计 */\n        .expanded-message-header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            margin-bottom: 0.5rem;\n        }\n        \n        .expanded-message-author {\n            color: #1e293b;\n            font-weight: 600;\n            font-size: 0.8rem;\n            display: flex;\n            align-items: center;\n            gap: 6px;\n        }\n        \n        .expanded-message-author::before {\n            content: '';\n            width: 6px;\n            height: 6px;\n            background: linear-gradient(135deg, #3b82f6, #8b5cf6);\n            border-radius: 50%;\n            flex-shrink: 0;\n        }\n        \n        .expanded-message-time {\n            color: #64748b;\n            font-size: 0.75rem;\n            background: #f8fafc;\n            padding: 2px 8px;\n            border-radius: 4px;\n            border: 1px solid #e2e8f0;\n            position: relative;\n            font-weight: 500;\n            transition: all 0.2s ease;\n        }\n        \n        .expanded-message-time:hover {\n            background: #f1f5f9;\n            border-color: #cbd5e1;\n        }\n        \n        .expanded-message-time::after {\n            content: attr(data-full-time);\n            position: absolute;\n            bottom: 100%;\n            right: 0;\n            transform: translateY(-4px);\n            background: #1e293b;\n            color: white;\n            padding: 4px 8px;\n            border-radius: 6px;\n            font-size: 0.7rem;\n            white-space: nowrap;\n            opacity: 0;\n            pointer-events: none;\n            transition: opacity 0.2s ease;\n            z-index: 1000;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        }\n        \n        .expanded-message-time:hover::after {\n            opacity: 1;\n        }\n        \n        /* 展开消息内容 - 现代化设计 */\n        .expanded-message-content {\n            color: #334155;\n            line-height: 1.6;\n            font-size: 0.875rem;\n            padding: 0.75rem;\n            background: #f8fafc;\n            border: 1px solid #e2e8f0;\n            border-radius: 6px;\n            margin-top: 0.5rem;\n            position: relative;\n        }\n        \n        .expanded-message-content::before {\n            content: '';\n            position: absolute;\n            left: 0;\n            top: 0;\n            bottom: 0;\n            width: 3px;\n            background: linear-gradient(180deg, #3b82f6, #8b5cf6);\n            border-radius: 0 0 0 6px;\n        }\n        \n        /* 展开区域的时间分隔符 */\n        .expanded-time-divider {\n            display: flex;\n            align-items: center;\n            margin: 1rem 0 0.75rem 0;\n            text-align: center;\n        }\n        \n        .expanded-time-divider::before,\n        .expanded-time-divider::after {\n            content: '';\n            flex: 1;\n            height: 1px;\n            background: linear-gradient(to right, transparent, rgba(0, 126, 255, 0.3), transparent);\n        }\n        \n        .expanded-time-divider-text {\n            padding: 0 12px;\n            color: var(--accent-blue);\n            font-size: 0.75rem;\n            font-weight: 600;\n            background-color: rgba(255, 255, 255, 0.8);\n            border-radius: 12px;\n            padding: 4px 12px;\n            border: 1px solid rgba(0, 126, 255, 0.2);\n            box-shadow: 0 1px 3px rgba(0, 126, 255, 0.1);\n        }\n        \n        /* 展开区域的时间跳跃指示器 */\n        .expanded-time-jump {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 6px;\n            margin: 0.75rem 0;\n            padding: 6px 12px;\n            background: linear-gradient(135deg, rgba(255, 152, 0, 0.1), rgba(255, 193, 7, 0.1));\n            border: 1px solid rgba(255, 152, 0, 0.3);\n            border-radius: 12px;\n            color: #e65100;\n            font-size: 0.7rem;\n            font-weight: 500;\n            text-align: center;\n        }\n        \n        .expanded-time-jump .jump-icon {\n            font-size: 0.75rem;\n        }\n        \n        /* 按钮样式 */\n        .load-more-section {\n            margin: 0.75rem 0;\n            display: flex;\n            justify-content: center;\n            position: relative;\n        }\n        \n        .load-more-section::before {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 0;\n            right: 0;\n            height: 1px;\n            background: linear-gradient(to right, transparent, rgba(251, 101, 30, 0.2), transparent);\n            z-index: 1;\n        }\n        \n        .load-more-button {\n            background: linear-gradient(135deg, #3b82f6, #8b5cf6);\n            color: white;\n            border: none;\n            padding: 12px 24px;\n            border-radius: 12px;\n            font-size: 0.875rem;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            gap: 8px;\n            position: relative;\n            z-index: 2;\n            white-space: nowrap;\n            box-shadow: \n                0 4px 6px rgba(0, 0, 0, 0.05),\n                0 1px 3px rgba(0, 0, 0, 0.1);\n            min-width: 200px;\n            overflow: hidden;\n        }\n        \n        .load-more-button::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.15), transparent);\n            transition: left 0.6s ease;\n        }\n        \n        .load-more-button:hover::before {\n            left: 100%;\n        }\n        \n        .load-more-button:hover {\n            background: linear-gradient(135deg, #2563eb, #7c3aed);\n            transform: translateY(-1px);\n            box-shadow: \n                0 10px 15px rgba(0, 0, 0, 0.1),\n                0 4px 6px rgba(0, 0, 0, 0.05);\n        }\n        \n        .load-more-button .progress-text {\n            font-size: 0.75rem;\n            opacity: 0.9;\n            font-weight: 500;\n        }\n        \n        /* 展开区域底部操作区 */\n        .expanded-area-footer {\n            padding: 0.75rem 1.25rem;\n            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);\n            border-top: 1px solid #e2e8f0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        \n        /* 收起按钮 - 现代化设计 */\n        .collapse-all-button {\n            background: linear-gradient(135deg, #64748b, #475569);\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 8px;\n            font-size: 0.8rem;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            gap: 6px;\n            white-space: nowrap;\n            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n        }\n        \n        .collapse-all-button:hover {\n            background: linear-gradient(135deg, #475569, #334155);\n            transform: translateY(-1px);\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        }\n        \n        /* 动画 */\n        .expanded-message {\n            animation: expandedSlideIn 0.4s ease forwards;\n            opacity: 0;\n            transform: translateX(-10px);\n        }\n        \n        @keyframes expandedSlideIn {\n            from { \n                opacity: 0; \n                transform: translateX(-10px);\n            }\n            to { \n                opacity: 1; \n                transform: translateX(0);\n            }\n        }\n        \n        .expanded-message:nth-child(1) { animation-delay: 0.1s; }\n        .expanded-message:nth-child(2) { animation-delay: 0.15s; }\n        .expanded-message:nth-child(3) { animation-delay: 0.2s; }\n        .expanded-message:nth-child(4) { animation-delay: 0.25s; }\n        .expanded-message:nth-child(5) { animation-delay: 0.3s; }\n        .expanded-message:nth-child(6) { animation-delay: 0.35s; }\n        \n        /* 展开区域动画 */\n        .expanded-messages-area {\n            animation: expandedAreaSlideIn 0.5s ease forwards;\n            opacity: 0;\n            transform: translateY(10px);\n        }\n        \n        @keyframes expandedAreaSlideIn {\n            from { \n                opacity: 0; \n                transform: translateY(10px);\n            }\n            to { \n                opacity: 1; \n                transform: translateY(0);\n            }\n        }\n        \n        @keyframes slideOutToTop {\n            from {\n                opacity: 1;\n                transform: translateY(0);\n                max-height: 1000px;\n            }\n            to {\n                opacity: 0;\n                transform: translateY(-20px);\n                max-height: 0;\n            }\n        }\n        \n        /* 折叠动画 */\n        .collapsing {\n            overflow: hidden;\n            transition: all 0.5s ease;\n            transform-origin: top;\n        }\n        \n        .collapsing.collapse-out {\n            opacity: 0;\n            transform: scaleY(0);\n            margin-top: 0;\n            margin-bottom: 0;\n            padding-top: 0;\n            padding-bottom: 0;\n        }\n        \n        /* 加载指示器 - 现代化设计 */\n        .loading-indicator {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 1.25rem;\n            color: #475569;\n            font-size: 0.875rem;\n            font-weight: 500;\n            background: linear-gradient(145deg, #f8fafc 0%, #f1f5f9 100%);\n            border: 1px solid #e2e8f0;\n            border-radius: 12px;\n            margin: 0.75rem 0;\n            box-shadow: \n                0 1px 3px rgba(0, 0, 0, 0.05),\n                0 1px 2px rgba(0, 0, 0, 0.1);\n        }\n        \n        .loading-indicator .spinner {\n            width: 18px;\n            height: 18px;\n            border: 2px solid #e2e8f0;\n            border-top-color: #3b82f6;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n            margin-right: 10px;\n        }\n        \n        @keyframes spin {\n            to { transform: rotate(360deg); }\n        }\n\n\n\n        /* 操作按钮区域样式 */\n        .action-buttons-container {\n            display: flex; \n            flex-wrap: wrap; \n            justify-content: center; \n            gap: 10px; \n            margin: 20px 0;\n            padding-bottom: 20px; \n        }\n\n        .action-button {\n            background-color: var(--accent-primary);\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: var(--card-radius);\n            font-size: 1rem;\n            font-weight: 500;\n            cursor: pointer;\n            transition: background-color 0.3s ease, transform 0.2s ease;\n            box-shadow: var(--card-shadow);\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            flex-shrink: 0; \n        }\n        .action-button:hover { background-color: var(--accent-secondary); transform: translateY(-2px); }\n        .action-button i, .action-button .fas { margin-right: 8px; }\n\n        .footer { margin-top: 30px; text-align: center; color: var(--text-secondary); font-size: 0.9rem; }\n        #report-content-wrapper .footer { margin-top: 30px; padding-bottom: 20px; } \n\n        .mindmap-card {}\n        .mindmap-card h2 i { margin-right: 8px; }\n        .mindmap-controls { display: flex; gap: 10px; margin-bottom: 15px; align-items: center; flex-wrap: wrap; }\n        .mindmap-controls button { background-color: var(--km-blue); color: white; border: none; padding: 8px 12px; border-radius: var(--card-radius); font-size: 0.9rem; cursor: pointer; transition: background-color 0.2s ease; font-weight: 500; display: inline-flex; align-items: center; justify-content: center; }\n        .mindmap-controls button:hover { background-color: #005bb5; }\n        .mindmap-controls button i { margin-right: 5px; }\n        .mindmap-controls .fullscreen-toggle-btn { margin-left: auto; } \n\n        .kityminder-container {\n            flex-grow: 1; \n            overflow: hidden; \n            background-color: #fff; \n            border-radius: 8px;\n            padding: 0; \n            border: 1px solid var(--bg-tertiary);\n            min-height: 400px; \n            position: relative; \n            transition: height 0.3s ease-in-out; \n            display: flex; \n            align-items: center; \n            justify-content: center; \n            touch-action: none;\n            font-family: var(--font-family); /* 确保KityMinder容器使用正确的字体 */\n        }\n        \n        /* 确保KityMinder SVG文本使用正确的字体 */\n        .kityminder-container svg text {\n            font-family: var(--font-family) !important;\n        }\n        .kityminder-container:empty::before { \n            content: \"思维导图加载中或内容为空...\";\n            color: var(--text-secondary); font-style: italic; text-align: center;\n            padding: 20px; display: flex; justify-content: center; align-items: center;\n            height: 100%; min-height: 150px;\n        }\n\n        #mermaid-main-feedback-message, #mermaid-modal-feedback-message {\n            text-align: center; margin-top: 15px; padding: 8px; border-radius: 4px;\n            font-weight: 500; font-size: 0.9rem; display: none; \n        }\n        #mermaid-main-feedback-message.success, #mermaid-modal-feedback-message.success {\n            color: #155724; background-color: #d4edda; border: 1px solid #c3e6cb; display: block;\n        }\n        #mermaid-main-feedback-message.error, #mermaid-modal-feedback-message.error {\n            color: #721c24; background-color: #f8d7da; border: 1px solid #f5c6cb; display: block;\n        }\n        #mermaid-main-feedback-message.info, #mermaid-modal-feedback-message.info {\n            color: #0c5460; background-color: #d1ecf1; border: 1px solid #bee5eb; display: block;\n        }\n\n        #feedback-message { text-align: center; margin-top: 10px; font-weight: 500; }\n        #feedback-message.success { color: green; }\n        #feedback-message.error { color: red; }\n\n        .modal-overlay {\n            position: fixed; top: 0; left: 0; width: 100%; height: 100%;\n            background-color: rgba(0, 0, 0, 0.75); \n            display: none; \n            justify-content: center; align-items: center; z-index: 1000; padding: 20px;\n        }\n        .modal-overlay.active { display: flex; } \n        .modal-content { \n            width: 95%; height: 90%; max-width: 1200px;\n        }\n        .modal-close-btn {\n            position: absolute; top: 15px; right: 20px; background: none; border: none;\n            font-size: 2.2rem; color: var(--text-secondary); cursor: pointer;\n            line-height: 1; padding: 5px; z-index: 1010; \n        }\n        .modal-close-btn:hover { color: var(--text-primary); }\n        #modalKityMinderContainer { \n            flex-grow: 1; min-height: 0; \n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(20px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        .card { animation: fadeIn 0.5s ease forwards; }\n        .main-card { animation-delay: 0.1s; }\n        /* 动态话题卡片动画延迟 - 支持任意数量的话题 */\n        .topic-cards-wrapper .topic-card:nth-child(1) { animation-delay: 0.2s; }\n        .topic-cards-wrapper .topic-card:nth-child(2) { animation-delay: 0.3s; }\n        .topic-cards-wrapper .topic-card:nth-child(3) { animation-delay: 0.4s; }\n        .topic-cards-wrapper .topic-card:nth-child(4) { animation-delay: 0.5s; }\n        .topic-cards-wrapper .topic-card:nth-child(5) { animation-delay: 0.6s; }\n        .topic-cards-wrapper .topic-card:nth-child(6) { animation-delay: 0.7s; }\n        .topic-cards-wrapper .topic-card:nth-child(7) { animation-delay: 0.8s; }\n        .topic-cards-wrapper .topic-card:nth-child(8) { animation-delay: 0.9s; }\n        .topic-cards-wrapper .topic-card:nth-child(9) { animation-delay: 1.0s; }\n        .topic-cards-wrapper .topic-card:nth-child(10) { animation-delay: 1.1s; }\n        .topic-cards-wrapper .topic-card:nth-child(n+11) { animation-delay: 1.2s; }\n        .mindmap-card-container .card { animation-delay: 0.6s; } \n        .quote-card { animation-delay: 0.7s; }\n        .links-card { animation-delay: 0.8s; }\n        .stats-wordcloud-row { animation: fadeIn 0.5s ease forwards; animation-delay: 0.9s; }\n        #report-content-wrapper .footer { animation: fadeIn 0.5s ease forwards; animation-delay: 1.0s; }\n        .action-buttons-container { animation: fadeIn 0.5s ease forwards; animation-delay: 1.1s; }\n\n        @media (max-width: 768px) {\n            body { padding: 10px; font-size: 14px; }\n            h1 { font-size: 1.8rem; }\n            h2 { font-size: 1.4rem; }\n            h3 { font-size: 1.1rem; }\n\n            .grid-container { \n                grid-template-columns: 1fr;\n                grid-template-areas:\n                    \"main\"\n                    \"topics\"\n                    \"mindmap\"\n                    \"quote\"\n                    \"links\"\n                    \"bottom_row\";\n            }\n\n\n\n            .stats-wordcloud-row { flex-direction: column; } \n            .stats-wordcloud-row > .card { width: 100%; flex-basis: auto !important; max-width: none; } \n            \n            .topic-cards-wrapper { \n                display: flex !important; \n                flex-direction: column; \n                gap: var(--grid-gap); \n                grid-template-columns: none !important; /* 覆盖桌面端的网格设置 */\n            } \n            .topic-card { \n                width: 100%; \n                min-height: auto; \n                grid-column: unset !important; /* 移除网格列设置 */\n            }\n\n            .topic-card > .topic-card-content-wrapper { padding-bottom: 1rem; }\n            .topic-chat-count { position: static; margin-top: 10px; margin-bottom: 10px; text-align: left; }\n            \n            /* 移动端话题讨论容器样式 */\n            .topic-description p { font-size: 0.85rem; }\n            .chat-conversation { padding: 0.6rem; }\n            .chat-message { margin-bottom: 0.4rem; padding: 0.25rem 0; }\n            .message-header { gap: 6px; }\n            .message-author { font-size: 0.8rem; }\n            .message-time { font-size: 0.65rem; }\n            .message-content { \n                font-size: 0.8rem; \n                line-height: 1.3; \n                padding: 0.3rem 0.5rem; \n                margin-left: 0.5rem;\n            }\n            .time-divider-text { font-size: 0.7rem; padding: 1px 8px; }\n            \n            .topic-time-span { \n                margin: 0.3rem 0 0.4rem 0; \n                padding: 3px 6px; \n                font-size: 0.65rem; \n                gap: 4px;\n            }\n            .topic-time-span .time-icon { font-size: 0.65rem; }\n            .topic-time-span .aggregated-label { font-size: 0.6rem; }\n            \n            .time-jump-indicator { \n                margin: 0.6rem 0; \n                padding: 4px 10px; \n                font-size: 0.65rem; \n                gap: 4px;\n            }\n            .time-jump-indicator .jump-icon { font-size: 0.7rem; }\n            \n            .card-icon { font-size: 2.5rem; opacity:0.05; } \n            .mindmap-card .card-icon { bottom: 15px; right: 15px; }\n            \n            .user-stats-table th, .user-stats-table td { padding: 0.5rem 0.25rem; font-size: 0.8rem; }\n            .user-stats-table td { text-align: left; } \n            .user-stats-table .message-count-col { text-align: center; } \n            \n            .action-button { padding: 8px 15px; font-size: 0.9rem; } \n            .load-more-button { \n                padding: 6px 12px; \n                font-size: 0.75rem; \n                gap: 4px;\n            }\n            .load-more-button .progress-text { \n                font-size: 0.7rem; \n            }\n            .collapse-all-button { \n                padding: 6px 12px; \n                font-size: 0.75rem; \n                gap: 4px;\n            }\n            \n            /* 移动端展开区域样式 */\n            .expanded-messages-area {\n                margin: 0.75rem 0;\n                padding: 0.75rem;\n            }\n            \n            .expanded-area-header {\n                margin-bottom: 0.5rem;\n                padding-bottom: 0.4rem;\n            }\n            \n            .expanded-area-title {\n                font-size: 0.75rem;\n                gap: 4px;\n            }\n            \n            .expanded-area-progress {\n                font-size: 0.65rem;\n                padding: 1px 6px;\n            }\n            \n            .expanded-message {\n                padding: 0.6rem;\n                margin-bottom: 0.4rem;\n            }\n            \n            .expanded-message-header {\n                margin-bottom: 0.3rem;\n            }\n            \n            .expanded-message-author {\n                font-size: 0.75rem;\n                gap: 3px;\n            }\n            \n            .expanded-message-time {\n                font-size: 0.65rem;\n                padding: 1px 4px;\n            }\n            \n            .expanded-message-content {\n                font-size: 0.8rem;\n                line-height: 1.4;\n                padding: 0.3rem 0.5rem;\n            }\n            \n            .expanded-time-divider {\n                margin: 0.75rem 0 0.5rem 0;\n            }\n            \n            .expanded-time-divider-text {\n                font-size: 0.7rem;\n                padding: 3px 10px;\n            }\n            \n            .expanded-time-jump {\n                margin: 0.6rem 0;\n                padding: 4px 10px;\n                font-size: 0.65rem;\n                gap: 4px;\n            }\n\n            .mindmap-card-container .card { padding: 15px; } \n            .mindmap-controls button { font-size: 0.8rem; padding: 6px 10px; }\n            .modal-content { width: 100%; height: 95%; padding:15px; } \n            .modal-close-btn { font-size: 1.8rem; top:10px; right:10px;}\n\n\n        }\n\n        @media (max-width: 480px) {\n            .user-stats-table { display: block; overflow-x: auto; } \n            .user-stats-table th, .user-stats-table td { white-space: normal; } \n            .user-stats-table thead, .user-stats-table tbody, .user-stats-table tr { display: block; } \n            .user-stats-table tr { border-bottom: 1px solid var(--bg-tertiary); }\n            .user-stats-table th { display: none; } \n            .user-stats-table td { \n                display: block; text-align: left; \n                border-bottom: none; padding-left: 0.5rem; \n                width: 100% !important; \n            }\n            .user-stats-table td.message-count-col { text-align: left; } \n            .user-stats-table td::before { \n                content: attr(data-label); \n                font-weight: bold; \n                display: inline-block; \n                width: 100px; \n                margin-right: 10px; \n                color: var(--text-primary); \n                text-align: left; \n            }\n             .user-stats-table td.contribution-col::before {\n                width: auto; \n                margin-bottom: 5px; \n                display: block; \n            }\n             .user-stats-table td.contribution-col {\n                padding-left: 0.5rem; \n            }\n            .user-stats-table tr:last-child { border-bottom: none; }\n\n\n        }\n    </style>\n</head>\n<body>\n    <div id=\"report-content-wrapper\"> <div class=\"grid-container\">\n            <div class=\"card main-card\">\n                <h1 contenteditable=\"false\">[主报告标题 - 例如：AI产品团日报]</h1>\n                <div class=\"date\">[日期 - 例如：2025年5月19日]</div>\n                <div class=\"meta-info\">\n                    <!-- 统计指标模板区域 - AI将在此处动态生成统计指标 -->\n                    <!-- META_INFO_TEMPLATE_START -->\n                    <span><i class=\"fas fa-comment\"></i> 消息数: [数字]+</span>\n                    <span><i class=\"fas fa-users\"></i> 活跃用户: [数字]+</span>\n                    <span><i class=\"fas fa-fire\"></i> 热点话题: [数字]</span>\n                    <!-- META_INFO_TEMPLATE_END -->\n                    <!-- \n                    说明：AI应该：\n                    1. 删除 META_INFO_TEMPLATE_START 和 META_INFO_TEMPLATE_END 之间的模板内容\n                    2. 根据实际统计指标数量，为每个指标生成一个 <span> 元素\n                    3. 选择合适的图标：\n                       - fas fa-comment (消息数)\n                       - fas fa-users (用户数)\n                       - fas fa-fire (热点话题)\n                       - fas fa-chart-line (趋势数据)\n                       - fas fa-clock (时间统计)\n                       - fas fa-thumbs-up (互动数据)\n                    4. 保持相同的HTML结构和CSS类名\n                    -->\n                </div>\n                <p class=\"summary\">[在此处填写当日讨论的总体摘要。保持简洁明了，突出群组的主要主题和氛围。]</p>\n                <i class=\"fas fa-microchip card-icon\"></i>\n            </div>\n\n\n\n            <div class=\"topic-cards-wrapper\">\n                <!-- 话题卡片模板区域 - AI将在此处动态生成话题卡片 -->\n                <!-- TOPIC_CARDS_TEMPLATE_START -->\n                <div class=\"card topic-card\">\n                    <div class=\"topic-card-content-wrapper\">\n                        <h2 contenteditable=\"false\"><i class=\"fas fa-lightbulb\"></i> [主题1标题]</h2>\n                        <div class=\"topic-category\">[分类1 - 例如：工具技巧]</div>\n                        <div class=\"topic-discussion-container\">\n                            <div class=\"topic-description\">\n                                <p>关于<span class=\"highlight-keyword\">[话题关键词]</span>的讨论引发了群内成员的广泛关注，大家从不同角度分享了各自的观点和经验。</p>\n                            </div>\n                            <div class=\"chat-conversation\">\n                                <!-- 话题时间跨度提示区域 - AI根据需要动态生成 -->\n                                <!-- TOPIC_TIME_SPAN_TEMPLATE_START -->\n                                <div class=\"topic-time-span\">\n                                    <span class=\"time-icon\">⏰</span>\n                                    <span class=\"time-range\">[开始时间] - [结束时间]</span>\n                                    <span class=\"aggregated-label\">• 该话题的聚合对话</span>\n                                </div>\n                                <!-- TOPIC_TIME_SPAN_TEMPLATE_END -->\n                                \n                                <!-- 聊天对话模板区域 - AI将根据实际对话内容动态生成 -->\n                                <!-- CONVERSATION_TEMPLATE_START -->\n                                <div class=\"chat-message\">\n                                    <div class=\"message-header\">\n                                        <span class=\"message-author\">@[用户名]</span>\n                                        <span class=\"message-time relative-time\" data-full-time=\"[完整时间]\" title=\"[完整时间]\">[相对时间]</span>\n                                    </div>\n                                    <span class=\"message-content\">[用户的具体聊天内容]</span>\n                                </div>\n                                <!-- CONVERSATION_TEMPLATE_END -->\n                                <!-- \n                                AI使用说明：\n                                【话题时间跨度提示】\n                                1. 删除 TOPIC_TIME_SPAN_TEMPLATE_START 和 TOPIC_TIME_SPAN_TEMPLATE_END 之间的模板内容\n                                2. 如果话题跨越超过2小时（如上午、下午分散对话），生成时间跨度提示\n                                3. 时间格式：上午9:30 - 下午15:45、今天10:00 - 18:30等\n                                4. 如果话题集中在短时间内（如1小时内），可省略此提示\n                                \n                                【聊天对话】\n                                1. 删除 CONVERSATION_TEMPLATE_START 和 CONVERSATION_TEMPLATE_END 之间的模板内容\n                                2. 根据实际聊天记录动态生成任意数量的 chat-message div\n                                3. 每条消息包含 message-header（用户名+时间）和 message-content（聊天内容）\n                                4. 用户名格式：@用户名\n                                5. 时间显示：相对时间（如\"2小时前\"）+ 完整时间tooltip\n                                6. 聊天内容使用原始对话，保持真实性\n                                7. 数量灵活：可以是2条、5条、8条等任意数量\n                                8. 按时间顺序排列，体现对话的连贯性\n                                9. 时间格式：相对时间用于显示，完整时间用于data-full-time和title属性\n                                10. 时间跳跃处理：当相邻消息时间差超过30分钟时，自动插入时间跳跃指示器\n                                -->\n                            </div>\n                            <!-- 查看更多聊天记录功能 - 动态插入区域 -->\n                            <div class=\"expandable-messages-container\" data-topic-id=\"[话题ID]\" data-total-messages=\"[总数量]\">\n                                <!-- 查看更多按钮和新消息将动态插入到这里 -->\n                            </div>\n                        </div>\n                        <div class=\"topic-tags\">\n                            <span class=\"tag\">[ChatGPT]</span>\n                            <span class=\"tag\">[技术问题]</span>\n                            <span class=\"tag\">[性能优化]</span>\n                        </div>\n                        <div class=\"topic-chat-count\"><i class=\"fas fa-comments\"></i> 相关消息: [总数量]条</div>\n                    </div>\n                    <i class=\"fas fa-tools card-icon\"></i>\n                </div>\n               \n                <!-- TOPIC_CARDS_TEMPLATE_END -->\n                <!-- \n                说明：AI应该：\n                1. 删除 TOPIC_CARDS_TEMPLATE_START 和 TOPIC_CARDS_TEMPLATE_END 之间的模板内容\n                2. 根据实际话题数量，为每个话题生成一个完整的 topic-card div\n                3. 每个话题卡片使用合适的图标：\n                   - fas fa-lightbulb (想法/讨论)\n                   - fas fa-rocket (新功能/产品)  \n                   - fas fa-tools (工具/技术)\n                   - fas fa-comments-dollar (商业/盈利)\n                   - fas fa-star (热门话题)\n                   - fas fa-fire (热点事件)\n                   - fas fa-cogs (技术方案)\n                   - fas fa-users (社区/用户)\n                4. 话题标签(topic-tags)应该使用 topic_tags 字段，显示2-4个精准的业内热词\n                5. 标签示例：ChatGPT、Claude、Cursor、技术问题、性能优化、用户体验等\n                6. 相关消息数量：显示该话题相关的总聊天消息数（如：52条、128条等）\n                7. 讨论容器中的聊天引用：选择3-6条最具代表性的消息进行展示\n                8. 注意区分：总消息数 ≠ 引用展示数，前者通常远大于后者\n                9. 保持相同的HTML结构和CSS类名\n                10. 支持任意数量的话题卡片（动画延迟已优化支持1-10+个话题）\n                11. \"查看更多\"功能配置：\n                    - 将expandable-messages-container的data-topic-id设置为话题的topic_id\n                    - 将expandable-messages-container的data-total-messages设置为该话题的总消息数量\n                    - 在JavaScript的TOPIC_MESSAGES_DATA_PLACEHOLDER区域填充完整的消息数据\n                    - 按钮和消息将由JavaScript自动生成，无需手动添加HTML\n                -->\n            </div>\n\n            <div class=\"mindmap-card-container card\">\n                <div class=\"mindmap-card\">\n                    <h2><i class=\"fas fa-sitemap\"></i> 核心概念关系图</h2>\n                    <div class=\"mindmap-controls\">\n                        <button id=\"zoomInBtn\"><i class=\"fas fa-search-plus\"></i> 放大</button>\n                        <button id=\"zoomOutBtn\"><i class=\"fas fa-search-minus\"></i> 缩小</button>\n                        <button id=\"downloadDiagramBtn\"><i class=\"fas fa-download\"></i> 下载 SVG</button>\n                        <button id=\"fullscreenOpenBtn\" class=\"fullscreen-toggle-btn\"><i class=\"fas fa-expand\"></i> 全屏</button>\n                    </div>\n                    <div class=\"kityminder-container\" id=\"mainKityMinderContainer\">\n                        </div>\n                    <div id=\"mermaid-main-feedback-message\"></div> <i class=\"fas fa-project-diagram card-icon\"></i>\n                </div>\n            </div>\n\n            <div class=\"card quote-card\">\n                <h2 contenteditable=\"false\"><i class=\"fas fa-quote-left\"></i> 精彩引用</h2>\n                <!-- 精彩引用模板区域 - AI将在此处动态生成引用 -->\n                <!-- QUOTES_TEMPLATE_START -->\n                <div class=\"quote\">\n                    \"[引言内容]\"\n                    <div class=\"quote-author\">- @[发言人]</div>\n                </div>\n                <!-- QUOTES_TEMPLATE_END -->\n                <!-- \n                说明：AI应该：\n                1. 删除 QUOTES_TEMPLATE_START 和 QUOTES_TEMPLATE_END 之间的模板内容\n                2. 根据实际精彩引用数量，为每条引用生成一个完整的 quote div\n                3. 保持相同的HTML结构和CSS类名\n                -->\n                <i class=\"fas fa-comment-dots card-icon\"></i>\n            </div>\n\n            <div class=\"card links-card\">\n                <h2 contenteditable=\"false\"><i class=\"fas fa-link\"></i> 重要链接与资源</h2>\n                <!-- 链接资源模板区域 - AI将在此处动态生成链接 -->\n                <!-- LINKS_TEMPLATE_START -->\n                <div class=\"link-item\">\n                    <a href=\"[URL链接]\" target=\"_blank\">\n                        <i class=\"fas fa-external-link-alt link-icon\"></i>\n                        <span class=\"link-title\">[链接标题]</span>\n                    </a>\n                </div>\n                <div class=\"link-item\">\n                     <i class=\"fas fa-file link-icon\"></i> <span class=\"link-title\">[文档标题]</span>\n                </div>\n                <!-- LINKS_TEMPLATE_END -->\n                <!-- \n                说明：AI应该：\n                1. 删除 LINKS_TEMPLATE_START 和 LINKS_TEMPLATE_END 之间的模板内容\n                2. 根据实际链接数量，为每个链接生成一个完整的 link-item div\n                3. 对于外部链接，使用带 <a href> 的格式\n                4. 对于文档/内部资源，使用不带链接的格式\n                5. 选择合适的图标：fas fa-external-link-alt (外部链接) 或 fas fa-file (文档)\n                6. 保持相同的HTML结构和CSS类名\n                7. 重要，全数生成，不要遗漏\n                -->\n                <i class=\"fas fa-share-alt card-icon\"></i>\n            </div>\n\n            <div class=\"stats-wordcloud-row\">\n                <div class=\"card stats-card\">\n                    <h2 contenteditable=\"false\"><i class=\"fas fa-chart-line\"></i> 活跃之星</h2>\n                    <table class=\"user-stats-table\">\n                        <thead>\n                            <tr>\n                                <th class=\"user-name-col\">用户</th>\n                                <th class=\"message-count-col\">发言数</th>\n                                <th class=\"contribution-col\">主要贡献</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <!-- 活跃用户模板区域 - AI将在此处动态生成用户行 -->\n                            <!-- USERS_TEMPLATE_START -->\n                            <tr>\n                                <td data-label=\"用户\" class=\"user-name-col\">@[用户名]</td>\n                                <td data-label=\"发言数\" class=\"message-count-col\">[发言数]+</td>\n                                <td data-label=\"主要贡献\" class=\"contribution-col\">[用户主要贡献内容]</td>\n                            </tr>\n                            <!-- USERS_TEMPLATE_END -->\n                            <!-- \n                            说明：AI应该：\n                            1. 删除 USERS_TEMPLATE_START 和 USERS_TEMPLATE_END 之间的模板内容\n                            2. 根据实际活跃用户数量，为每个用户生成一个完整的 <tr> 行\n                            3. 保持相同的HTML结构和CSS类名\n                            4. 保持 data-label 属性用于移动端显示\n                            -->\n                        </tbody>\n                    </table>\n                    <i class=\"fas fa-user-friends card-icon\"></i>\n                </div>\n\n                <div class=\"card wordcloud-card\">\n                    <h2 contenteditable=\"false\"><i class=\"fas fa-tags\"></i> 话题标签云</h2>\n                    <div class=\"wordcloud\">\n                        <!-- 话题标签云模板区域 - AI将在此处动态生成标签项 -->\n                        <!-- WORDCLOUD_TEMPLATE_START -->\n                        <span class=\"wordcloud-item size-5\">[ChatGPT]</span>\n                        <span class=\"wordcloud-item size-4\">[技术问题]</span>\n                        <span class=\"wordcloud-item size-3\">[性能优化]</span>\n                        <span class=\"wordcloud-item size-2\">[用户体验]</span>\n                        <!-- WORDCLOUD_TEMPLATE_END -->\n                        <!-- \n                        说明：AI应该：\n                        1. 删除 WORDCLOUD_TEMPLATE_START 和 WORDCLOUD_TEMPLATE_END 之间的模板内容\n                        2. 根据话题标签出现频次，为每个标签生成一个 wordcloud-item span\n                        3. 使用合适的尺寸类：size-1 (最小) 到 size-5 (最大)\n                        4. 按出现频次排序，热门标签使用更大的尺寸\n                        5. 优先显示业内热词：ChatGPT、Claude、Cursor、Agent等\n                        6. 保持相同的HTML结构和CSS类名\n                        -->\n                    </div>\n                    <i class=\"fas fa-tags card-icon\"></i>\n                </div>\n            </div>\n\n\n            \n\n\n        </div> <div class=\"footer\">\n            <p>数据来源：[您的数据来源 - 例如：AI产品团聊天记录] | 生成日期：[生成日期] | 统计周期：[统计周期 - 例如：[日期]全天]</p>\n            <p>[免责声明 - 例如：本报告由AI自动生成，仅供参考，不代表所有群成员观点。]</p>\n        </div>\n    </div> <div class=\"action-buttons-container\">\n        <button id=\"screenshotToClipboardBtn\" class=\"action-button\"><i class=\"fas fa-clipboard\"></i> 拷贝截图</button>\n        <button id=\"screenshotDownloadBtn\" class=\"action-button\"><i class=\"fas fa-camera\"></i> 下载截图</button>\n        <button id=\"copyHtmlBtn\" class=\"action-button\"><i class=\"fas fa-copy\"></i> 拷贝源码</button>\n        <button id=\"downloadHtmlBtn\" class=\"action-button\"><i class=\"fas fa-download\"></i> 下载报告</button>\n        <button id=\"viewHistoricalReportBtn\" class=\"action-button\"><i class=\"fas fa-history\"></i> 查看历史日报</button>\n        <button id=\"viewPreviousReportBtn\" class=\"action-button\"><i class=\"fas fa-calendar-alt\"></i> 查看昨日日报</button>\n    </div>\n    <div id=\"feedback-message\"></div> <div id=\"fullscreenModal\" class=\"modal-overlay\">\n        <div class=\"modal-content card\"> <button id=\"fullscreenCloseBtn\" class=\"modal-close-btn\" aria-label=\"关闭全屏\">&times;</button>\n            <h2 style=\"padding-top: 15px;\"><i class=\"fas fa-sitemap\"></i> 核心概念关系图 (全屏)</h2>\n            <div class=\"mindmap-controls\">\n                <button id=\"modalZoomInBtn\"><i class=\"fas fa-search-plus\"></i> 放大</button>\n                <button id=\"modalZoomOutBtn\"><i class=\"fas fa-search-minus\"></i> 缩小</button>\n                <button id=\"modalDownloadDiagramBtn\"><i class=\"fas fa-download\"></i> 下载 SVG</button>\n            </div>\n            <div class=\"kityminder-container\" id=\"modalKityMinderContainer\">\n                </div>\n            <div id=\"mermaid-modal-feedback-message\"></div> </div>\n    </div>\n\n    <script>\n    // --- KityMinder (思维导图) JavaScript 开始 ---\n\n    // --- 全局变量 ---\n    let mainKM, modalKM; // 分别存储主视图和模态框视图的KityMinder实例\n    const kityminderData = { // 思维导图数据结构\n        root: { // 根节点定义\n            data: { text: \"核心概念\", expandState: \"expand\" }, // 根节点显示文本和默认展开状态\n            children: [ // 子节点数组，添加示例数据\n                { data: { text: \"主要议题A\", expandState: \"expand\" }, children: [\n                    { data: { text: \"议题A-1\" } },\n                    { data: { text: \"议题A-2\", expandState: \"collapse\" }, children: [ // 默认折叠的子节点\n                        { data: { text: \"A-2-详情1\" } },\n                        { data: { text: \"A-2-详情2\" } }\n                    ]},\n                    { data: { text: \"议题A-3\" } }\n                ]},\n                { data: { text: \"主要议题B\" } },\n                { data: { text: \"主要议题C\", expandState: \"expand\" }, children: [\n                    { data: { text: \"议题C-1\" } },\n                    { data: { text: \"议题C-2\" } }\n                ]}\n            ]\n        },\n        template: 'default', // 使用KityMinder的默认模板\n        theme: 'customPictureTheme', // 应用自定义主题\n        version: \"1.4.50\" // KityMinder版本号\n    };\n\n    // --- DOM元素获取 ---\n    const mainZoomInBtn = document.getElementById('zoomInBtn');\n    const mainZoomOutBtn = document.getElementById('zoomOutBtn');\n    const mainDownloadDiagramBtn = document.getElementById('downloadDiagramBtn');\n    const mainKityMinderContainer = document.getElementById('mainKityMinderContainer');\n    const mermaidMainFeedbackMessage = document.getElementById('mermaid-main-feedback-message');\n    const fullscreenOpenBtn = document.getElementById('fullscreenOpenBtn');\n    const fullscreenModal = document.getElementById('fullscreenModal');\n    const fullscreenCloseBtn = document.getElementById('fullscreenCloseBtn');\n    const modalKityMinderContainer = document.getElementById('modalKityMinderContainer');\n    const modalZoomInBtn = document.getElementById('modalZoomInBtn');\n    const modalZoomOutBtn = document.getElementById('modalZoomOutBtn');\n    const modalDownloadDiagramBtn = document.getElementById('modalDownloadDiagramBtn');\n    const mermaidModalFeedbackMessage = document.getElementById('mermaid-modal-feedback-message');\n\n    // --- KityMinder 自定义主题定义 ---\n    if (typeof kityminder !== 'undefined' && kityminder.Theme) {\n        kityminder.Theme.register('customPictureTheme', {\n            'root-color': 'var(--km-root-text, #333333)', 'root-background': 'var(--km-root-bg, #f0f0f0)',\n            'root-stroke': 'var(--km-root-bg)', 'root-font-size': 19, 'root-font-weight': 'bold', 'root-font-family': 'Inter, \"SF Pro Display\", \"Segoe UI\", \"Microsoft YaHei\", \"PingFang SC\", \"Hiragino Sans GB\", \"Noto Sans CJK SC\", sans-serif',\n            'root-padding': [14, 24], 'root-margin': [10, 2], 'root-radius': 5, 'root-space': 8, 'root-stroke-width': 1,\n            'main-color': 'var(--km-node-text, #ffffff)', 'main-background': 'var(--km-orange)',\n            'main-stroke': 'var(--km-orange)', 'main-font-size': 19, 'main-font-weight': 'bold', 'main-font-family': 'Inter, \"SF Pro Display\", \"Segoe UI\", \"Microsoft YaHei\", \"PingFang SC\", \"Hiragino Sans GB\", \"Noto Sans CJK SC\", sans-serif',\n            'main-padding': [10, 20], 'main-margin': [10, 2], 'main-radius': 5, 'main-space': 4, 'main-stroke-width': 1,\n            'sub-color': 'var(--km-node-text, #ffffff)', 'sub-background': 'var(--km-blue)',\n            'sub-stroke': 'var(--km-blue)', 'sub-font-size': 19, 'sub-font-weight': 'bold', 'sub-font-family': 'Inter, \"SF Pro Display\", \"Segoe UI\", \"Microsoft YaHei\", \"PingFang SC\", \"Hiragino Sans GB\", \"Noto Sans CJK SC\", sans-serif',\n            'sub-padding': [8, 16], 'sub-margin': [8, 15], 'sub-radius': 5, 'sub-space': 4, 'sub-stroke-width': 1,\n            'connect-color': 'var(--km-connect-color, #777777)', 'connect-width': 1.5, 'main-connect-width': 1.5,\n            'selected-connect-color': 'var(--km-orange)', 'selected-connect-width': 2.5,\n            'background': \"#ffffff\", 'text-selection-color': 'var(--km-blue)',\n            'node-padding': [6, 12], 'node-margin': [8, 15], 'node-radius': 5, 'font-size': 19, 'font-weight': 'bold', 'font-family': 'Inter, \"SF Pro Display\", \"Segoe UI\", \"Microsoft YaHei\", \"PingFang SC\", \"Hiragino Sans GB\", \"Noto Sans CJK SC\", sans-serif',\n        });\n        console.log(\"KityMinder Debug: 自定义主题 'customPictureTheme' 已注册。\");\n    } else {\n        console.error(\"KityMinder Debug: kityminder 或 kityminder.Theme 未定义。无法注册自定义主题。\");\n    }\n\n    // --- KityMinder 辅助函数 ---\n    function showKityMinderFeedback(element, message, type = 'info', duration = 3000) {\n        if (element) {\n            element.textContent = message; element.className = type; element.style.display = 'block';\n            setTimeout(() => { element.textContent = ''; element.className = ''; element.style.display = 'none'; }, duration);\n        }\n    }\n\n    async function downloadKityMinderAsSVG(kmInstance, baseFilename, feedbackElem) {\n        if (!kmInstance || typeof kmInstance.exportData !== 'function' || !kmInstance.getRoot || !kmInstance.getRoot()) {\n            showKityMinderFeedback(feedbackElem, '无法下载：思维导图实例无效或内容为空。', 'error'); return;\n        }\n        try {\n            if (typeof kmInstance.refresh === 'function') {\n                kmInstance.refresh(); await new Promise(resolve => setTimeout(resolve, 100));\n            }\n            const svgExportPromise = kmInstance.exportData('svg');\n            if (!svgExportPromise || typeof svgExportPromise.then !== 'function') {\n                showKityMinderFeedback(feedbackElem, '下载失败：导出函数行为异常。', 'error'); return;\n            }\n            const exportedObject = await svgExportPromise;\n            let svgString = \"\";\n            if (typeof exportedObject === 'string') { svgString = exportedObject; }\n            else if (exportedObject && typeof exportedObject.data === 'string') { svgString = exportedObject.data; }\n            else {\n                const paper = kmInstance.getPaper && kmInstance.getPaper();\n                const svgNode = paper && paper.container && paper.container.firstChild;\n                if (svgNode && typeof XMLSerializer !== 'undefined') { svgString = new XMLSerializer().serializeToString(svgNode); }\n            }\n            if (svgString && svgString.length > 100) { // Basic check for non-empty SVG\n                const blob = new Blob([svgString], { type: 'image/svg+xml;charset=utf-8' });\n                const url = URL.createObjectURL(blob); const link = document.createElement('a');\n                link.href = url; link.download = `${baseFilename}.svg`; document.body.appendChild(link);\n                link.click(); document.body.removeChild(link); URL.revokeObjectURL(url);\n                showKityMinderFeedback(feedbackElem, `${baseFilename}.svg 已下载!`, 'success');\n            } else {\n                showKityMinderFeedback(feedbackElem, `下载失败：生成的SVG内容为空或无效。请确保导图已正确渲染。`, 'error');\n            }\n        } catch (error) {\n            console.error(`下载 ${baseFilename}.svg 失败:`, error);\n            showKityMinderFeedback(feedbackElem, `下载 ${baseFilename}.svg 失败: ${error.message || error}`, 'error');\n        }\n    }\n    \n    function setupKityMinderTouchEvents(km, container) {\n        let isPanning = false;\n        let lastPanX, lastPanY;\n\n        let isPinching = false;\n        let initialPinchDistance = 0;\n        let lastPinchZoomValue = km.getZoomValue(); \n\n        container.addEventListener('touchstart', (e) => {\n            if (e.touches.length === 1) {\n                isPanning = true;\n                isPinching = false; \n                const touch = e.touches[0];\n                lastPanX = touch.clientX;\n                lastPanY = touch.clientY;\n                e.preventDefault(); \n            } else if (e.touches.length === 2) {\n                isPinching = true;\n                isPanning = false; \n                const touch1 = e.touches[0];\n                const touch2 = e.touches[1];\n                initialPinchDistance = Math.hypot(touch1.clientX - touch2.clientX, touch1.clientY - touch2.clientY);\n                lastPinchZoomValue = km.getZoomValue(); \n                e.preventDefault(); \n            }\n        }, { passive: false });\n\n        container.addEventListener('touchmove', (e) => {\n            if (isPanning && e.touches.length === 1) {\n                const touch = e.touches[0];\n                const dx = touch.clientX - lastPanX;\n                const dy = touch.clientY - lastPanY;\n\n                const paper = km.getPaper();\n                if (paper) {\n                    const viewbox = paper.getViewBox();\n                    paper.setViewBox(viewbox.x - dx, viewbox.y - dy, viewbox.width, viewbox.height);\n                }\n                lastPanX = touch.clientX;\n                lastPanY = touch.clientY;\n                e.preventDefault();\n\n            } else if (isPinching && e.touches.length === 2) {\n                const touch1 = e.touches[0];\n                const touch2 = e.touches[1];\n                const currentPinchDistance = Math.hypot(touch1.clientX - touch2.clientX, touch1.clientY - touch2.clientY);\n\n                if (initialPinchDistance > 0) { \n                    const scaleFactor = currentPinchDistance / initialPinchDistance;\n                    let newZoomLevelPercentage = lastPinchZoomValue * scaleFactor;\n                    \n                    newZoomLevelPercentage = Math.max(20, Math.min(newZoomLevelPercentage, 300)); \n\n                    const rect = container.getBoundingClientRect();\n                    const screenPinchCenterX = (touch1.clientX + touch2.clientX) / 2 - rect.left;\n                    const screenPinchCenterY = (touch1.clientY + touch2.clientY) / 2 - rect.top;\n                    \n                    const paper = km.getPaper();\n                    let paperPinchCenter = null;\n\n                    if (paper && typeof paper.screenToPaperPoint === 'function' && typeof kity !== 'undefined' && kity.Point) {\n                        const screenPoint = new kity.Point(screenPinchCenterX, screenPinchCenterY);\n                        paperPinchCenter = paper.screenToPaperPoint(screenPoint);\n                    }\n                    \n                    km.execCommand('zoom', newZoomLevelPercentage, paperPinchCenter);\n                }\n                e.preventDefault();\n            }\n        }, { passive: false });\n\n        container.addEventListener('touchend', (e) => {\n            if (e.touches.length === 0) { \n                isPanning = false;\n                isPinching = false;\n                initialPinchDistance = 0;\n            } else if (e.touches.length === 1) { \n                if (isPinching) { \n                    isPinching = false;\n                    initialPinchDistance = 0;\n                    \n                    isPanning = true; \n                    const touch = e.touches[0];\n                    lastPanX = touch.clientX;\n                    lastPanY = touch.clientY;\n                }\n            }\n        });\n    }\n\n\n    async function initializeKityMinder(containerElement, data, feedbackElem, isModal = false) {\n        console.log(\"正在初始化KityMinder于容器:\", containerElement.id);\n        containerElement.innerHTML = ''; \n        if (typeof kityminder === 'undefined' || typeof kityminder.Minder === 'undefined') {\n            showKityMinderFeedback(feedbackElem, \"KityMinder库未加载!\", 'error'); return null;\n        }\n        try {\n            const km = new kityminder.Minder({ renderTo: containerElement });\n            km.importJson(data); km.enable(); \n            await new Promise(resolve => setTimeout(resolve, 500)); \n\n            if (km.getRoot && km.getRoot()) { \n                km.getRoot().traverse(function(node) {\n                    node.setData('font-weight', 'bold'); node.setData('font-size', 19); node.setData('stroke-width', 1);\n                    node.setData('font-family', 'Inter, \"SF Pro Display\", \"Segoe UI\", \"Microsoft YaHei\", \"PingFang SC\", \"Hiragino Sans GB\", \"Noto Sans CJK SC\", sans-serif');\n                    if (node.getLevel() === 0) { node.setData('stroke', 'var(--km-root-bg)'); node.setData('padding', [14, 24]); }\n                    else if (node.getLevel() === 1) { node.setData('stroke', 'var(--km-orange)'); node.setData('padding', [10, 20]); }\n                    else if (node.getLevel() === 2) { node.setData('stroke', 'var(--km-blue)'); node.setData('padding', [8, 16]); }\n                    else if (node.getLevel() >= 3) { \n                        node.setData('background', 'var(--km-lightblue)'); node.setData('color', 'var(--km-node-text, #ffffff)');\n                        node.setData('padding', [8, 16]); node.setData('stroke', 'var(--km-lightblue)');\n                    }\n                    node.render();\n                });\n                km.refresh(); await new Promise(resolve => setTimeout(resolve, 100));\n\n                try {\n                    const paper = km.getPaper(); const renderContainer = km.getRenderContainer();\n                    if (!paper || !renderContainer) {\n                        console.error(\"KityMinder paper 或 render container 不可用，无法进行自适应显示。\");\n                        km.execCommand('camera', km.getRoot(), 100); km.execCommand('zoom', isModal ? 85 : 75); \n                        if (km) { setupKityMinderTouchEvents(km, containerElement); } \n                        return km;\n                    }\n                    const diagramBox = renderContainer.getBoundaryBox();\n                    if (diagramBox && diagramBox.width > 0 && diagramBox.height > 0 && isFinite(diagramBox.x) && isFinite(diagramBox.y) && isFinite(diagramBox.width) && isFinite(diagramBox.height)) {\n                        const viewPadding = 2; const containerWidth = containerElement.clientWidth; const containerHeight = containerElement.clientHeight;\n                        if (containerWidth <= 0 || containerHeight <= 0) {\n                            console.warn(\"KityMinder Debug: 容器尚无尺寸，无法进行自适应缩放。回退到默认视图。\");\n                            km.execCommand('camera', km.getRoot(), 100); km.execCommand('zoom', isModal ? 85 : 75); \n                            if (km) { setupKityMinderTouchEvents(km, containerElement); }\n                            return km;\n                        }\n                        const usableWidth = containerWidth - 2 * viewPadding; const usableHeight = containerHeight - 2 * viewPadding;\n                        const scaleX = usableWidth / diagramBox.width; const scaleY = usableHeight / diagramBox.height;\n                        let targetScale = Math.min(scaleX, scaleY);\n                        targetScale *= 0.995; \n                        let finalZoomPercent = Math.min(Math.max(targetScale * 100, 20), 100); \n                        const diagramCenterPoint = (typeof kity !== 'undefined' && kity.Point) ? new kity.Point(diagramBox.x + diagramBox.width / 2, diagramBox.y + diagramBox.height / 2) : null;\n                        km.execCommand('zoom', finalZoomPercent, diagramCenterPoint);\n\n                        if (!isModal) { \n                            const actualDiagramHeightAfterZoom = diagramBox.height * (finalZoomPercent / 100);\n                            containerElement.style.height = Math.max(parseInt(getComputedStyle(containerElement).minHeight) || 350, actualDiagramHeightAfterZoom + 30) + 'px'; \n                            containerElement.style.minHeight = '0px'; \n                        }\n                    } else {\n                        console.warn(\"KityMinder Debug: 无效的 diagramBox 尺寸。回退到默认视图。\");\n                        km.execCommand('camera', km.getRoot(), 100); km.execCommand('zoom', isModal ? 80 : 70);\n                    }\n                } catch (e_view) {\n                    console.error(`KityMinder Debug: 自适应视图调整出错 (${containerElement.id}):`, e_view);\n                    km.execCommand('camera', km.getRoot(), 100); km.execCommand('zoom', isModal ? 80 : 70);\n                }\n                km.refresh(); \n            }\n            console.log(\"KityMinder 初始化并导入数据完成:\", containerElement.id); \n            if (km) { \n                setupKityMinderTouchEvents(km, containerElement);\n            }\n            return km;\n        } catch (error) {\n            console.error(\"初始化 KityMinder 出错 (\" + containerElement.id + \"):\", error);\n            showKityMinderFeedback(feedbackElem, `初始化KityMinder失败: ${error.message}`, 'error');\n            containerElement.innerHTML = `<p style=\"color:red; text-align:center; padding:20px;\">初始化KityMinder失败: ${error.message}</p>`;\n            return null;\n        }\n    }\n\n    // --- KityMinder 事件监听 ---\n    if(mainZoomInBtn) mainZoomInBtn.addEventListener('click', () => { if (mainKM) mainKM.execCommand('zoomIn'); });\n    if(mainZoomOutBtn) mainZoomOutBtn.addEventListener('click', () => { if (mainKM) mainKM.execCommand('zoomOut'); });\n    if(mainDownloadDiagramBtn) mainDownloadDiagramBtn.addEventListener('click', () => { downloadKityMinderAsSVG(mainKM, '核心概念关系图-主视图', mermaidMainFeedbackMessage); });\n\n    if(fullscreenOpenBtn) fullscreenOpenBtn.addEventListener('click', () => {\n        if(fullscreenModal) fullscreenModal.classList.add('active'); document.body.classList.add('modal-active');\n        if(modalKityMinderContainer) modalKityMinderContainer.innerHTML = ''; \n        initializeKityMinder(modalKityMinderContainer, kityminderData, mermaidModalFeedbackMessage, true).then(kmInstance => modalKM = kmInstance);\n    });\n    if(fullscreenCloseBtn) fullscreenCloseBtn.addEventListener('click', () => {\n        if(fullscreenModal) fullscreenModal.classList.remove('active'); document.body.classList.remove('modal-active');\n        if(modalKityMinderContainer) modalKityMinderContainer.innerHTML = ''; modalKM = null; \n    });\n    if(modalZoomInBtn) modalZoomInBtn.addEventListener('click', () => { if (modalKM) modalKM.execCommand('zoomIn'); });\n    if(modalZoomOutBtn) modalZoomOutBtn.addEventListener('click', () => { if (modalKM) modalKM.execCommand('zoomOut'); });\n    if(modalDownloadDiagramBtn) modalDownloadDiagramBtn.addEventListener('click', () => { downloadKityMinderAsSVG(modalKM, '核心概念关系图-全屏', mermaidModalFeedbackMessage); });\n\n    function initializeMainKityMinderDiagram() {\n        console.log(\"DOM完全加载或函数被调用。正在初始化主KityMinder。\");\n        if (typeof kityminder !== 'undefined' && mainKityMinderContainer) {\n            initializeKityMinder(mainKityMinderContainer, kityminderData, mermaidMainFeedbackMessage, false).then(kmInstance => mainKM = kmInstance);\n        } else {\n            if (mermaidMainFeedbackMessage) { showKityMinderFeedback(mermaidMainFeedbackMessage, \"KityMinder库加载失败或容器未找到，无法初始化思维导图。\", \"error\"); }\n            console.error(\"KityMinder库或主容器不可用，无法初始化。\");\n        }\n    }\n    // --- KityMinder (思维导图) JavaScript 结束 ---\n\n    // --- 报告页面通用 JavaScript 开始 ---\n    function getCssVariable(variableName, defaultValue = null) {\n        const value = getComputedStyle(document.documentElement).getPropertyValue(variableName).trim();\n        return value || defaultValue;\n    }\n\n    function getReportBaseName() {\n        const mainTitleElement = document.querySelector('.main-card h1'); let reportTitle = \"报告\";\n        const placeholderTitle = \"[主报告标题 - 例如：AI产品团日报]\";\n        if (mainTitleElement && mainTitleElement.textContent) {\n            const currentTitle = mainTitleElement.textContent.trim();\n            if (currentTitle && currentTitle !== placeholderTitle) { reportTitle = currentTitle; }\n        }\n        if (reportTitle.endsWith(\"日报\")) { reportTitle = reportTitle.substring(0, reportTitle.length - 2); }\n        return reportTitle + \"日报\"; \n    }\n\n    function getFormattedDateString() {\n        const reportDateElement = document.querySelector('.main-card .date'); let dateStr = \"nodate\";\n        const placeholderDate = \"[日期 - 例如：2025年5月19日]\";\n        if (reportDateElement && reportDateElement.textContent) {\n            const dateContent = reportDateElement.textContent.trim();\n            if (dateContent && dateContent !== placeholderDate) {\n                const match = dateContent.match(/(\\d{4})年\\s*(\\d{1,2})月\\s*(\\d{1,2})日/);\n                if (match) { dateStr = `${match[1]}-${match[2].padStart(2, '0')}-${match[3].padStart(2, '0')}`; }\n                else { console.warn(\"日期内容 '\" + dateContent + \"' 与 'YYYY年M月D日' 格式不匹配。文件名将使用 'nodate'。\");}\n            } else { console.warn(\"日期内容为占位符或空。文件名将使用 'nodate'。\"); }\n        } else { console.warn(\"未找到日期元素或无内容。文件名将使用 'nodate'。\"); }\n        return dateStr;\n    }\n\n    function sanitizeFilename(filename) { return filename.replace(/[^\\w\\u4e00-\\u9fa5\\-\\.]/g, '_').replace(/_+/g, '_'); }\n\n    const previousReportUrl = \"在此处填写昨日日报的URL\"; \n    const historicalReportUrl = \"https://czkzyp3cp1.feishu.cn/share/base/view/shrcnoweVpP2vDaWtAEFspjqRNf\"; \n\n    function showReportFeedbackMessage(message, type = 'info', duration = 3000) {\n        const feedbackElement = document.getElementById('feedback-message');\n        if (feedbackElement) {\n            feedbackElement.textContent = message; feedbackElement.className = type;\n            setTimeout(() => { element.textContent = ''; element.className = ''; }, duration);\n        }\n    }\n\n    async function captureScreenshot(elementToCapture) {\n        await document.fonts.ready; \n\n        const bodyBgColor = getCssVariable('--bg-primary', '#F5F5EE');\n        const cardBgColor = getCssVariable('--bg-secondary', '#faf9f6');\n        const tertiaryBgColor = getCssVariable('--bg-tertiary', '#f1f3f5');\n        const highlightKeywordBgColor = getCssVariable('--highlight-keyword-bg', '#ffe8cc');\n        const kityMinderContainerBgColor = '#ffffff'; \n\n        if (typeof mainKM !== 'undefined' && mainKM && typeof mainKM.refresh === 'function') {\n            try { mainKM.refresh(); await new Promise(resolve => setTimeout(resolve, 150)); } \n            catch (e) { console.warn(\"刷新KityMinder时出错:\", e); }\n        }\n\n        return html2canvas(elementToCapture, {\n            useCORS: true, scale: window.devicePixelRatio || 1.5, logging: false, backgroundColor: bodyBgColor,\n            width: elementToCapture.scrollWidth, height: elementToCapture.scrollHeight,\n            windowWidth: elementToCapture.scrollWidth, windowHeight: elementToCapture.scrollHeight,\n            x: 0, y: 0, scrollX: 0, scrollY: 0,\n            onclone: function(clonedDoc) {\n                clonedDoc.body.style.backgroundColor = bodyBgColor;\n                clonedDoc.documentElement.style.backgroundColor = bodyBgColor;\n                const reportWrapper = clonedDoc.getElementById('report-content-wrapper');\n                if (reportWrapper) {\n                    reportWrapper.style.backgroundColor = bodyBgColor;\n                    reportWrapper.style.height = elementToCapture.scrollHeight + 'px'; \n                    reportWrapper.style.overflow = 'visible'; \n                }\n                clonedDoc.querySelectorAll('.card').forEach(card => { card.style.backgroundColor = cardBgColor; card.style.overflow = 'visible'; });\n                const mindmapCardContainer = clonedDoc.querySelector('.mindmap-card-container.card');\n                if (mindmapCardContainer) { mindmapCardContainer.style.backgroundColor = cardBgColor; }\n\n                clonedDoc.querySelectorAll('.kityminder-container').forEach(kmContainer => {\n                    kmContainer.style.backgroundColor = kityMinderContainerBgColor; kmContainer.style.overflow = 'visible';\n                    const svgElements = kmContainer.querySelectorAll('svg');\n                    svgElements.forEach(svg => {\n                        svg.style.overflow = 'visible !important'; \n                        const originalKmContainer = document.getElementById(kmContainer.id);\n                        if (originalKmContainer) {\n                            const originalSvg = originalKmContainer.querySelector('svg');\n                            if (originalSvg) {\n                                svg.setAttribute('width', originalSvg.getAttribute('width'));\n                                svg.setAttribute('height', originalSvg.getAttribute('height'));\n                                svg.setAttribute('viewBox', originalSvg.getAttribute('viewBox'));\n                            }\n                        }\n                    });\n                });\n                clonedDoc.querySelectorAll('.link-item, .qr-code-item, .meta-info span, .tag').forEach(el => { el.style.backgroundColor = tertiaryBgColor; });\n                clonedDoc.querySelectorAll('.highlight-keyword').forEach(el => { \n                    el.style.display = 'inline'; el.style.padding = '1px 2px'; el.style.lineHeight = '1.2';\n                    el.style.boxDecorationBreak = 'clone'; el.style.webkitBoxDecorationBreak = 'clone';\n                    el.style.backgroundColor = highlightKeywordBgColor;\n                });\n                const allElements = clonedDoc.getElementsByTagName(\"*\");\n                for (let i = 0; i < allElements.length; i++) {\n                    allElements[i].style.transition = 'none !important'; allElements[i].style.animation = 'none !important';\n                }\n            }\n        });\n    }\n\n    const screenshotToClipboardBtn = document.getElementById('screenshotToClipboardBtn');\n    if(screenshotToClipboardBtn) screenshotToClipboardBtn.addEventListener('click', async function() {\n        const reportContent = document.getElementById('report-content-wrapper');\n        if (!reportContent) { showReportFeedbackMessage('截图错误: 未找到报告内容。', 'error'); return; }\n        const actionButtons = document.querySelector('.action-buttons-container');\n        const feedbackMsgElement = document.getElementById('feedback-message');\n        const originalButtonText = this.innerHTML; this.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> 处理中...'; this.disabled = true;\n        if(actionButtons) actionButtons.style.visibility = 'hidden'; if(feedbackMsgElement) feedbackMsgElement.style.visibility = 'hidden';\n        try {\n            await new Promise(resolve => setTimeout(resolve, 500)); \n            const canvas = await captureScreenshot(reportContent);\n            canvas.toBlob(async function(blob) {\n                if (blob) {\n                    try {\n                        if (navigator.clipboard && navigator.clipboard.write) { \n                            await navigator.clipboard.write([new ClipboardItem({ 'image/png': blob })]);\n                            showReportFeedbackMessage('截图已拷贝到剪贴板!', 'success');\n                        } else { \n                            const dataUrl = canvas.toDataURL('image/png'); const img = document.createElement('img');\n                            img.src = dataUrl; img.style.maxWidth = '100%'; img.style.border = '1px solid #ccc';\n                            const tempContainer = document.createElement('div');\n                            tempContainer.style.cssText = 'position:fixed;top:10px;left:10px;z-index:9999;background-color:white;padding:10px;border:1px solid black;';\n                            tempContainer.innerHTML = '<strong>请手动右键复制图片:</strong><br>'; tempContainer.appendChild(img);\n                            document.body.appendChild(tempContainer);\n                            showReportFeedbackMessage('截图已生成。请手动右键复制图片。此提示将在10秒后消失。', 'info', 10000);\n                            setTimeout(() => { if(document.body.contains(tempContainer)) document.body.removeChild(tempContainer); }, 10000);\n                        }\n                    } catch (copyError) {\n                        console.error('拷贝到剪贴板失败:', copyError);\n                        showReportFeedbackMessage('拷贝截图到剪贴板失败: ' + copyError.message, 'error', 5000);\n                    }\n                } else { throw new Error('无法将Canvas转换为Blob。'); }\n            }, 'image/png');\n        } catch (error) {\n            console.error('截图捕获失败:', error); showReportFeedbackMessage('截图捕获失败: ' + error.message, 'error');\n        } finally {\n            if(actionButtons) actionButtons.style.visibility = 'visible'; if(feedbackMsgElement) feedbackMsgElement.style.visibility = 'visible';\n            this.innerHTML = originalButtonText; this.disabled = false;\n        }\n    });\n\n    const screenshotDownloadBtn = document.getElementById('screenshotDownloadBtn');\n    if(screenshotDownloadBtn) screenshotDownloadBtn.addEventListener('click', async function() {\n        const reportContent = document.getElementById('report-content-wrapper');\n        if (!reportContent) { showReportFeedbackMessage('截图错误: 未找到报告内容。', 'error'); return; }\n        const actionButtons = document.querySelector('.action-buttons-container');\n        const feedbackMsgElement = document.getElementById('feedback-message');\n        const originalButtonText = this.innerHTML; this.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> 生成中...'; this.disabled = true;\n        if(actionButtons) actionButtons.style.visibility = 'hidden'; if(feedbackMsgElement) feedbackMsgElement.style.visibility = 'hidden';\n        try {\n            await new Promise(resolve => setTimeout(resolve, 500)); \n            const canvas = await captureScreenshot(reportContent);\n            const image = canvas.toDataURL('image/png'); const link = document.createElement('a');\n            const reportBaseName = getReportBaseName(); const dateSuffix = getFormattedDateString();\n            let filename = sanitizeFilename(reportBaseName + '-' + dateSuffix) + '.png';\n            link.href = image; link.download = filename; document.body.appendChild(link); link.click(); document.body.removeChild(link);\n            showReportFeedbackMessage('截图已下载为 ' + filename + '!', 'success');\n        } catch (error) {\n            console.error('下载截图失败:', error); showReportFeedbackMessage('下载截图失败: ' + error.message, 'error');\n        } finally {\n            if(actionButtons) actionButtons.style.visibility = 'visible'; if(feedbackMsgElement) feedbackMsgElement.style.visibility = 'visible';\n            this.innerHTML = originalButtonText; this.disabled = false;\n        }\n    });\n\n    const downloadHtmlBtn = document.getElementById('downloadHtmlBtn');\n    if(downloadHtmlBtn) downloadHtmlBtn.addEventListener('click', function() {\n        try {\n            const htmlContent = document.documentElement.outerHTML;\n            const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });\n            const link = document.createElement('a');\n            const reportBaseName = getReportBaseName(); const dateSuffix = getFormattedDateString();\n            let filename = sanitizeFilename(reportBaseName + '-' + dateSuffix) + '.html';\n            link.href = URL.createObjectURL(blob); link.download = filename; document.body.appendChild(link);\n            link.click(); document.body.removeChild(link); URL.revokeObjectURL(link.href);\n            showReportFeedbackMessage('HTML报告已下载为 ' + filename + '!', 'success');\n        } catch (error) {\n            console.error('下载HTML失败:', error); showReportFeedbackMessage('下载HTML失败: ' + error.message, 'error');\n        }\n    });\n\n    const copyHtmlBtn = document.getElementById('copyHtmlBtn');\n    if(copyHtmlBtn) copyHtmlBtn.addEventListener('click', function() {\n        const htmlContent = document.documentElement.outerHTML; const Gthis = this; \n        const originalButtonHTML = Gthis.innerHTML; const textarea = document.createElement('textarea');\n        textarea.value = htmlContent; textarea.style.position = 'fixed'; textarea.style.top = '-9999px'; textarea.style.left = '-9999px'; \n        document.body.appendChild(textarea);\n        try {\n            textarea.select(); textarea.setSelectionRange(0, textarea.value.length); \n            if (document.execCommand('copy')) { \n                Gthis.innerHTML = '<i class=\"fas fa-check\"></i> 已拷贝!';\n                showReportFeedbackMessage('HTML已拷贝到剪贴板!', 'success', 2000);\n            } else {\n                Gthis.innerHTML = '<i class=\"fas fa-times\"></i> 拷贝失败';\n                showReportFeedbackMessage('拷贝失败。您的浏览器可能不支持此操作。', 'error', 2000);\n            }\n        } catch (err) {\n            Gthis.innerHTML = '<i class=\"fas fa-times\"></i> 拷贝出错';\n            showReportFeedbackMessage('拷贝出错: ' + err.message, 'error', 2000); console.error('拷贝HTML源码出错:', err);\n        } finally {\n            setTimeout(function() { Gthis.innerHTML = originalButtonHTML; }, 2000); \n            document.body.removeChild(textarea); \n        }\n    });\n\n    const viewHistoricalReportBtn = document.getElementById('viewHistoricalReportBtn');\n    if(viewHistoricalReportBtn) viewHistoricalReportBtn.addEventListener('click', function() {\n        const urlToOpen = historicalReportUrl.trim();\n        if (urlToOpen && (urlToOpen.startsWith('http://') || urlToOpen.startsWith('https://'))) {\n            const newWindow = window.open(urlToOpen, '_blank');\n            if (!newWindow || newWindow.closed || typeof newWindow.closed == 'undefined') { \n                showReportFeedbackMessage('无法打开新窗口。请检查您的弹出窗口拦截设置。', 'error', 5000);\n            }\n        } else { showReportFeedbackMessage('历史日报的URL无效。', 'error', 5000); }\n    });\n\n    const viewPreviousReportBtn = document.getElementById('viewPreviousReportBtn');\n    if(viewPreviousReportBtn) viewPreviousReportBtn.addEventListener('click', function() {\n        const urlToOpen = previousReportUrl.trim();\n        const placeholderUrlText = \"在此处填写昨日日报的URL\";\n        if (urlToOpen && urlToOpen !== placeholderUrlText && (urlToOpen.startsWith('http://') || urlToOpen.startsWith('https://') || !urlToOpen.includes('://'))) { \n            const newWindow = window.open(urlToOpen, '_blank');\n            if (!newWindow || newWindow.closed || typeof newWindow.closed == 'undefined') {\n                showReportFeedbackMessage('无法打开新窗口。请检查您的弹出窗口拦截设置。', 'error', 5000);\n            }\n        } else { showReportFeedbackMessage('昨日日报的URL未配置或无效。请检查脚本中的 previousReportUrl 变量。', 'error', 5000); }\n    });\n\n    // --- 查看更多聊天记录功能 JavaScript 开始 - 重新设计 ---\n    \n    // 调试开关\n    const DEBUG_EXPAND_MESSAGES = true; // 设置为 true 启用调试信息\n    \n    // 存储每个话题的完整聊天记录数据和状态\n    let topicMessagesData = {};\n    let expandStates = new Map(); // 存储每个话题的展开状态\n    \n    // 每次加载的消息数量\n    const MESSAGES_PER_LOAD = 5;\n    \n    /**\n     * 初始化话题聊天记录数据\n     * AI使用说明：在生成HTML时，需要将每个话题的完整messages数组嵌入到这个函数中\n     */\n    function initializeTopicMessagesData() {\n        /* TOPIC_MESSAGES_DATA_PLACEHOLDER_START */\n        // AI将在此处替换为实际的话题消息数据，格式示例：\n        // topicMessagesData = {\n        //     \"merged_004\": [\n        //         { sender_name: \"杨飞\", content: \"有时候agent之间的沟通就是这么简单粗暴[旺柴] 这都得益于一个叫做 -p 的参数\", time: \"2025-06-29T11:41:27+08:00\" },\n        //         { sender_name: \"Λ-xzy\", content: \"Monica 高级版有需要的吗，还有半年，闲置了。平时主力该用 gpt plus 和 gemini pro 了\", time: \"2025-06-29T11:51:28+08:00\" },\n        //         // ... 该话题的所有其他消息\n        //     ],\n        //     \"另一个话题ID\": [\n        //         // ... 该话题的所有消息\n        //     ]\n        // };\n        topicMessagesData = {};\n        /* TOPIC_MESSAGES_DATA_PLACEHOLDER_END */\n    }\n    \n    /**\n     * 格式化时间显示\n     */\n    function formatMessageTime(timeString) {\n        if (!timeString) return { relative: '', full: '' };\n        \n        const messageTime = new Date(timeString);\n        \n        // 始终显示具体日期时间\n        const relativeTime = messageTime.toLocaleString('zh-CN', {\n            month: 'numeric',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n        }).replace(/\\//g, '-');\n        \n        const fullTime = messageTime.toLocaleString('zh-CN', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n        });\n        \n        return { relative: relativeTime, full: fullTime };\n    }\n    \n    /**\n     * 创建时间分隔符\n     */\n    function createTimeDivider(timeString) {\n        const divider = document.createElement('div');\n        divider.className = 'time-divider';\n        \n        const messageTime = new Date(timeString);\n        const today = new Date();\n        const yesterday = new Date(today);\n        yesterday.setDate(today.getDate() - 1);\n        \n        let dividerText = '';\n        \n        if (messageTime.toDateString() === today.toDateString()) {\n            dividerText = '今天';\n        } else if (messageTime.toDateString() === yesterday.toDateString()) {\n            dividerText = '昨天';\n        } else {\n            dividerText = messageTime.toLocaleDateString('zh-CN', {\n                month: 'long',\n                day: 'numeric',\n                weekday: 'short'\n            });\n        }\n        \n        const textSpan = document.createElement('span');\n        textSpan.className = 'time-divider-text';\n        textSpan.textContent = dividerText;\n        \n        divider.appendChild(textSpan);\n        return divider;\n    }\n    \n    /**\n     * 创建时间跳跃指示器\n     */\n    function createTimeJumpIndicator(hoursDiff) {\n        const indicator = document.createElement('div');\n        indicator.className = 'time-jump-indicator';\n        \n        let jumpText = '';\n        if (hoursDiff < 1) {\n            const minutes = Math.round(hoursDiff * 60);\n            jumpText = `时间跳跃 ${minutes}分钟`;\n        } else if (hoursDiff < 24) {\n            jumpText = `时间跳跃 ${Math.round(hoursDiff)}小时`;\n        } else {\n            const days = Math.round(hoursDiff / 24);\n            jumpText = `时间跳跃 ${days}天`;\n        }\n        \n        indicator.innerHTML = `\n            <span class=\"jump-icon\">⏰</span>\n            <span class=\"jump-text\">${jumpText}</span>\n        `;\n        \n        return indicator;\n    }\n    \n    /**\n     * 创建展开区域的时间分隔符\n     */\n    function createExpandedTimeDivider(timeString) {\n        const divider = document.createElement('div');\n        divider.className = 'expanded-time-divider';\n        \n        const messageTime = new Date(timeString);\n        const today = new Date();\n        const yesterday = new Date(today);\n        yesterday.setDate(today.getDate() - 1);\n        \n        let dividerText = '';\n        \n        if (messageTime.toDateString() === today.toDateString()) {\n            dividerText = '今天';\n        } else if (messageTime.toDateString() === yesterday.toDateString()) {\n            dividerText = '昨天';\n        } else {\n            dividerText = messageTime.toLocaleDateString('zh-CN', {\n                month: 'long',\n                day: 'numeric',\n                weekday: 'short'\n            });\n        }\n        \n        const textSpan = document.createElement('span');\n        textSpan.className = 'expanded-time-divider-text';\n        textSpan.textContent = dividerText;\n        \n        divider.appendChild(textSpan);\n        return divider;\n    }\n    \n    /**\n     * 创建展开区域的时间跳跃指示器\n     */\n    function createExpandedTimeJump(hoursDiff) {\n        const indicator = document.createElement('div');\n        indicator.className = 'expanded-time-jump';\n        \n        let jumpText = '';\n        if (hoursDiff < 1) {\n            const minutes = Math.round(hoursDiff * 60);\n            jumpText = `时间跳跃 ${minutes}分钟`;\n        } else if (hoursDiff < 24) {\n            jumpText = `时间跳跃 ${Math.round(hoursDiff)}小时`;\n        } else {\n            const days = Math.round(hoursDiff / 24);\n            jumpText = `时间跳跃 ${days}天`;\n        }\n        \n        indicator.innerHTML = `\n            <span class=\"jump-icon\">⏰</span>\n            <span>${jumpText}</span>\n        `;\n        \n        return indicator;\n    }\n    \n    /**\n     * 创建展开消息HTML元素 - 全新样式\n     */\n    function createExpandedMessageElement(message, showTimeDivider = false, timeJumpHours = null) {\n        const fragment = document.createDocumentFragment();\n        \n        // 如果需要显示时间跳跃指示器\n        if (timeJumpHours !== null && timeJumpHours >= 0.5) {\n            const jumpIndicator = createExpandedTimeJump(timeJumpHours);\n            fragment.appendChild(jumpIndicator);\n        }\n        \n        // 如果需要显示时间分隔符（日期变化）\n        if (showTimeDivider && message.time) {\n            const timeDivider = createExpandedTimeDivider(message.time);\n            fragment.appendChild(timeDivider);\n        }\n        \n        const messageDiv = document.createElement('div');\n        messageDiv.className = 'expanded-message';\n        \n        // 创建消息头部\n        const headerDiv = document.createElement('div');\n        headerDiv.className = 'expanded-message-header';\n        \n        const authorSpan = document.createElement('span');\n        authorSpan.className = 'expanded-message-author';\n        authorSpan.textContent = message.sender_name;\n        \n        // 添加时间显示\n        if (message.time) {\n            const timeInfo = formatMessageTime(message.time);\n            const timeSpan = document.createElement('span');\n            timeSpan.className = 'expanded-message-time';\n            timeSpan.textContent = timeInfo.relative;\n            timeSpan.setAttribute('data-full-time', timeInfo.full);\n            \n            headerDiv.appendChild(authorSpan);\n            headerDiv.appendChild(timeSpan);\n        } else {\n            headerDiv.appendChild(authorSpan);\n        }\n        \n        const contentDiv = document.createElement('div');\n        contentDiv.className = 'expanded-message-content';\n        contentDiv.textContent = message.content;\n        \n        messageDiv.appendChild(headerDiv);\n        messageDiv.appendChild(contentDiv);\n        fragment.appendChild(messageDiv);\n        \n        return fragment;\n    }\n    \n    /**\n     * 创建\"展开完整对话\"按钮\n     */\n    function createExpandButton(topicId, remainingCount) {\n        const section = document.createElement('div');\n        section.className = 'load-more-section';\n        \n        const expandButton = document.createElement('button');\n        expandButton.className = 'load-more-button';\n        expandButton.setAttribute('data-topic-id', topicId);\n        \n        expandButton.innerHTML = `\n            <i class=\"fas fa-chevron-down\"></i>\n            <span>展开完整对话</span>\n            <span class=\"progress-text\">(还有${remainingCount}条消息)</span>\n        `;\n        \n        expandButton.addEventListener('click', function() {\n            loadMoreMessages(this);\n        });\n        \n        section.appendChild(expandButton);\n        return section;\n    }\n    \n    /**\n     * 创建\"查看更多\"按钮（向后兼容）\n     */\n    function createLoadMoreButton(topicId, shownCount, totalCount) {\n        return createExpandButton(topicId, totalCount - shownCount);\n    }\n    \n    /**\n     * 创建展开区域容器\n     */\n    function createExpandedArea(topicId, shownCount, totalCount) {\n        const area = document.createElement('div');\n        area.className = 'expanded-messages-area';\n        area.setAttribute('data-topic-id', topicId);\n        \n        // 创建头部\n        const header = document.createElement('div');\n        header.className = 'expanded-area-header';\n        \n        const title = document.createElement('div');\n        title.className = 'expanded-area-title';\n        title.innerHTML = `\n            <i class=\"fas fa-comments icon\"></i>\n            <span>完整对话记录</span>\n        `;\n        \n        const progress = document.createElement('div');\n        progress.className = 'expanded-area-progress';\n        progress.textContent = `共 ${totalCount} 条消息`;\n        \n        header.appendChild(title);\n        header.appendChild(progress);\n        area.appendChild(header);\n        \n        // 创建内容区域\n        const content = document.createElement('div');\n        content.className = 'expanded-messages-content';\n        area.appendChild(content);\n        \n        // 添加说明文本\n        const note = document.createElement('div');\n        note.style.cssText = 'padding: 0.75rem; margin-bottom: 0.5rem; background: #f1f5f9; border: 1px solid #e2e8f0; border-radius: 6px; font-size: 0.8rem; color: #64748b; text-align: center;';\n        note.textContent = '以下是该话题的完整对话记录，按时间顺序排列';\n        content.appendChild(note);\n        \n        // 创建底部操作区\n        const footer = document.createElement('div');\n        footer.className = 'expanded-area-footer';\n        area.appendChild(footer);\n        \n        return area;\n    }\n    \n    /**\n     * 创建一键收起按钮\n     */\n    function createCollapseAllButton(topicId) {\n        const button = document.createElement('button');\n        button.className = 'collapse-all-button';\n        button.setAttribute('data-topic-id', topicId);\n        \n        button.innerHTML = `\n            <i class=\"fas fa-chevron-up\"></i>\n            <span>收起对话</span>\n        `;\n        \n        button.addEventListener('click', function() {\n            collapseAllMessages(this);\n        });\n        \n        return button;\n    }\n    \n    /**\n     * 创建加载指示器\n     */\n    function createLoadingIndicator() {\n        const indicator = document.createElement('div');\n        indicator.className = 'loading-indicator';\n        indicator.innerHTML = `\n            <div class=\"spinner\"></div>\n            <span>正在加载完整对话记录...</span>\n        `;\n        return indicator;\n    }\n    \n    /**\n     * 加载完整对话 - 全新设计的核心函数\n     */\n    function loadMoreMessages(button) {\n        const topicId = button.getAttribute('data-topic-id');\n        const container = document.querySelector(`[data-topic-id=\"${topicId}\"]`);\n        \n        if (!topicMessagesData[topicId] || !container) {\n            console.warn(`未找到话题 ${topicId} 的消息数据或容器`);\n            return;\n        }\n        \n        const state = expandStates.get(topicId);\n        \n        // 按时间顺序获取所有消息\n        const allMessages = [...topicMessagesData[topicId]];\n        allMessages.sort((a, b) => new Date(a.time) - new Date(b.time));\n        \n        // 获取已显示的消息内容，用于去重\n        const topicCard = container.closest('.topic-card');\n        const chatConversation = topicCard.querySelector('.chat-conversation');\n        const initialMessageContents = new Set();\n        \n        if (chatConversation) {\n            const initialMessageElements = chatConversation.querySelectorAll('.chat-message .message-content');\n            initialMessageElements.forEach(element => {\n                initialMessageContents.add(element.textContent.trim());\n            });\n        }\n        \n        // 获取所有消息用于展开（完整对话记录应该包含所有消息）\n        const messagesToExpand = allMessages.filter((message) => {\n            // 不过滤任何消息，展开区域显示完整的时间顺序对话\n            return true;\n        });\n        \n        if (messagesToExpand.length === 0) {\n            console.warn('没有更多消息可以展开');\n            return;\n        }\n        \n        // 调试信息\n        if (DEBUG_EXPAND_MESSAGES) {\n            console.log(`话题 ${topicId}: 总消息数=${allMessages.length}, 初始显示=${state.initialCount}, 完整展开=${messagesToExpand.length}`);\n            console.log('已显示消息内容:', Array.from(initialMessageContents));\n            console.log('完整对话消息:', messagesToExpand.map(m => m.content.substring(0, 50) + '...'));\n        }\n        \n        // 移除当前按钮，显示加载指示器\n        const currentSection = button.closest('.load-more-section');\n        if (!currentSection) {\n            console.warn('未找到按钮的父节点');\n            return;\n        }\n        const loadingIndicator = createLoadingIndicator();\n        container.replaceChild(loadingIndicator, currentSection);\n        \n        // 模拟加载延迟\n        setTimeout(() => {\n            // 创建展开区域\n            const expandedArea = createExpandedArea(topicId, state.initialCount, allMessages.length);\n            const contentArea = expandedArea.querySelector('.expanded-messages-content');\n            const footerArea = expandedArea.querySelector('.expanded-area-footer');\n            \n            // 添加所有展开的消息\n            messagesToExpand.forEach((message, index) => {\n                let showTimeDivider = false;\n                let timeJumpHours = null;\n                \n                // 检查时间跳跃和日期分隔符\n                if (index === 0) {\n                    // 第一条消息：检查与初始消息的时间差\n                    const topicCard = container.closest('.topic-card');\n                    const chatConversation = topicCard.querySelector('.chat-conversation');\n                    const lastInitialMessage = chatConversation ? chatConversation.querySelector('.chat-message:last-child') : null;\n                    \n                    if (lastInitialMessage && message.time) {\n                        const lastTimeSpan = lastInitialMessage.querySelector('.message-time');\n                        if (lastTimeSpan) {\n                            const lastTime = new Date(lastTimeSpan.getAttribute('data-full-time'));\n                            const currentTime = new Date(message.time);\n                            const timeDiffHours = Math.abs(currentTime - lastTime) / (1000 * 60 * 60);\n                            \n                            if (timeDiffHours >= 0.5) {\n                                timeJumpHours = timeDiffHours;\n                            }\n                            \n                            showTimeDivider = lastTime.toDateString() !== currentTime.toDateString();\n                        }\n                    }\n                } else {\n                    // 检查与前一条展开消息的时间差\n                    const prevMessage = messagesToExpand[index - 1];\n                    if (prevMessage.time && message.time) {\n                        const prevTime = new Date(prevMessage.time);\n                        const currentTime = new Date(message.time);\n                        const timeDiffHours = Math.abs(currentTime - prevTime) / (1000 * 60 * 60);\n                        \n                        if (timeDiffHours >= 0.5) {\n                            timeJumpHours = timeDiffHours;\n                        }\n                        \n                        showTimeDivider = prevTime.toDateString() !== currentTime.toDateString();\n                    }\n                }\n                \n                const messageElement = createExpandedMessageElement(message, showTimeDivider, timeJumpHours);\n                \n                // 设置动画延迟\n                const expandedMessage = messageElement.querySelector('.expanded-message');\n                if (expandedMessage) {\n                    expandedMessage.style.animationDelay = `${(index % 6) * 0.05}s`;\n                }\n                \n                contentArea.appendChild(messageElement);\n            });\n            \n            // 添加收起按钮到底部操作区\n            const collapseButton = createCollapseAllButton(topicId);\n            footerArea.appendChild(collapseButton);\n            \n            // 移除加载指示器，插入展开区域\n            container.removeChild(loadingIndicator);\n            container.appendChild(expandedArea);\n            \n            // 更新状态\n            state.isExpanded = true;\n            \n            // 不自动滚动，避免页面跳动\n            // 用户可以自己决定是否要滚动查看\n            \n        }, 400);\n    }\n    \n    /**\n     * 收起完整对话\n     */\n    function collapseAllMessages(button) {\n        const topicId = button.getAttribute('data-topic-id');\n        const container = document.querySelector(`[data-topic-id=\"${topicId}\"]`);\n        \n        if (!container) return;\n        \n        const state = expandStates.get(topicId);\n        if (!state) return;\n        \n        // 找到展开区域\n        const expandedArea = container.querySelector('.expanded-messages-area');\n        if (!expandedArea) return;\n        \n        // 添加折叠动画\n        expandedArea.style.animation = 'slideOutToTop 0.3s ease-out forwards';\n        setTimeout(() => {\n            if (expandedArea.parentNode) {\n                expandedArea.parentNode.removeChild(expandedArea);\n            }\n            \n            // 重新创建\"展开完整对话\"按钮\n            const expandButton = createExpandButton(topicId, state.totalCount - state.initialCount);\n            container.appendChild(expandButton);\n            \n            // 重置状态\n            state.isExpanded = false;\n            state.loadedCount = state.initialCount;\n            \n        }, 300);\n    }\n    \n    /**\n     * 初始化单个话题的展开功能\n     */\n    function initializeTopicExpandable(container) {\n        const topicId = container.getAttribute('data-topic-id');\n        const totalMessages = parseInt(container.getAttribute('data-total-messages')) || 0;\n        \n        if (!topicMessagesData[topicId] || totalMessages === 0) {\n            return; // 没有数据或没有消息\n        }\n        \n        // 获取已显示的消息数量（即初始显示的消息数量）\n        const topicCard = container.closest('.topic-card');\n        const chatConversation = topicCard.querySelector('.chat-conversation');\n        const initialMessages = chatConversation ? chatConversation.querySelectorAll('.chat-message').length : 0;\n        \n        // 调试信息\n        if (DEBUG_EXPAND_MESSAGES) {\n            console.log(`初始化话题 ${topicId}: 初始显示=${initialMessages}, 总数=${totalMessages}, 数据中消息数=${topicMessagesData[topicId].length}`);\n        }\n        \n        // 初始化状态\n        expandStates.set(topicId, {\n            initialCount: initialMessages,\n            totalCount: totalMessages,\n            loadedCount: initialMessages,\n            isExpanded: false\n        });\n        \n        // 如果初始显示的消息数量已经等于总数，不显示按钮\n        if (initialMessages < totalMessages) {\n            // 创建初始的\"展开完整对话\"按钮\n            const expandButton = createExpandButton(topicId, totalMessages - initialMessages);\n            container.appendChild(expandButton);\n        }\n    }\n    \n    /**\n     * 初始化查看更多功能\n     */\n    function initializeLoadMoreFunctionality() {\n        // 初始化数据\n        initializeTopicMessagesData();\n        \n        // 为所有可展开的消息容器初始化功能\n        document.querySelectorAll('.expandable-messages-container').forEach(container => {\n            initializeTopicExpandable(container);\n        });\n    }\n    \n    // --- 查看更多聊天记录功能 JavaScript 结束 ---\n\n    window.addEventListener('load', () => {\n        initializeMainKityMinderDiagram();\n        initializeLoadMoreFunctionality();\n    });\n\n    // --- 报告页面通用 JavaScript 结束 ---\n    </script>\n</body>\n</html>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        420,
        -540
      ],
      "id": "56c11cd0-a0f4-4739-8b29-f5e48613ba3b",
      "name": "ConfigureChatParameters"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/tmp/{{ $json.filename }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2400,
        80
      ],
      "id": "f92b2e19-deb4-466e-9a28-0dc91c5d6edb",
      "name": "SaveHTMLFile"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=群组: {{ $('ConfigureChatParameters').first().json.group_name }}\n日期: {{ $('ConfigureChatParameters').first().json.date }}\n\n\n\n输出格式：完整的HTML文档代码",
        "messages": {
          "messageValues": [
            {
              "message": "=# 微信群聊日报生成器 - HTML输出专用\n\n## 🚨 CRITICAL OUTPUT REQUIREMENT 🚨\n\n**你必须只输出完整的HTML代码，不要添加任何解释文字、说明或markdown标记！**\n\n**🔥 MANDATORY TEMPLATE REPLACEMENT 🔥**\n- ❌ 不要输出：\"```html\" 或 \"```\" 代码块标记\n- ✅ 直接输出完整的HTML代码，从 <!DOCTYPE html> 开始，到 </html> 结束\n\n\n## 任务要求\n生成一个视觉上引人入胜、布局紧凑无空隙、配色和谐统一、风格固定一致、适合截图分享的单页网站\n\n\n## 最高优先级\n\n以下是要求是优先级最高的任务，务必严格执行\n\n- 遍历群聊所有消息，推荐出今日的 KOL，聊天内容结构务必围绕 KOL 的话题、聊天内容展开\n- KOL 要求：综合考虑群聊人数占比，发言数量、质量、价值点与启发点\n- 忽略json中 \"detailed_topics\"字段的\"description\"字段\n\n## 🚫 严格数据引用与防幻觉准则 🚫\n\n- **所有生成内容，包括但不限于热点话题、精彩引用、链接、活跃之星的发言内容，必须严格且仅来源于提供的原始数据（即 `{{ JSON.stringify($json) }}` 中的信息）。**\n- **严禁任何形式的虚构、编造、推断或补充原始数据中不存在的信息。**\n- **如果原始数据中没有对应内容，则该部分应留空或明确表示“无相关内容”，绝不允许自行生成。**\n- **对于“引用人员原话”的要求，如果原始数据中找不到确切的原话，则该引用不应被生成。**\n- **所有链接必须是原始数据中明确提供的真实链接，不得生成或修改。**\n\n### 聊天记录支持格式\n支持以下多种常见格式：\n- \"[时间] 昵称：消息内容\"\n- \"时间 - 昵称：消息内容\"\n- \"昵称 时间：消息内容\"\n- 其他合理的时间和昵称分隔格式\n\n### 聊天内容结构\n\n- 群聊总结\n\n  - 群聊内容\n  - 消息数量\n  - 活跃人员数量\n  - 热点话题数量\n  - 统计时间\n\n- 今日热点\n  \n  罗列群聊中**所有热点**消息，不要遗漏，热点按照如下结构展示\n\n  - topic-tags\n  - 消息数量\n  - 关键词提及次数\n  - 核心内容务必**引用人员原话**\n  - 列出所有主题，每个主题不少于 150 字\n  - 根据聊天总数倒序排序(总数越多排在最前)\n\n- 精彩引用\n\n  - 不超过 5 条\n  - 务必**引用人员原话**\n  - **核心条件**：高质量，有启发性，有道理，有价值，有反响(有正向评论或赞扬)，有深度，有思考，惊艳且让人印象深刻的金句\n  - 活跃之星更有可能被引用（锦上添花而已）,但只是更高几率可以获得展示。应以核心条件为重\n  - 不能被引用的: 一个疑问，一个抱怨，一个求助，一个吐槽，一个没头没尾确实上下文的语句\n    - 比如：\"这个AI产品的交互动效做得真棒，细节处理得很到位。/ 我设计的AI产品交互动效，大家觉得怎么样？\" -> 没头没尾，哪个产品？ pass\n    - 比如：\"AI Agent之间的沟通参数怎么设计才能更高效？\"\", -> 一个求助，疑问。 pass\n  - 尽可能不要同一个人的引用，除非真的非常值得推荐\n\n\n- 重要链接与资源\n\n  罗列群聊中**所有**真实的、原始的链接\n\n  - 支持点击文字内容后跳转原始链\n  - 格式：**标题：链接**，不要使用 md 格式，例如：小云雀AI内容创作工具：https://finder.video.qq.com/251/20302/stodownload\n  - **全数**列出链接，不要遗漏\n\n- 活跃之星\n\n  - 发言次数\n  - 人员按发言次数**倒序**排序，次数少于 3 次的不统计\n  - 发言内容汇总\n  - 最多 5 人，最少 1 人\n\n- 词云\n\n  - 不少于 20 个\n\n### 注意事项\n\n- 群主是@{{ $('ConfigureChatParameters').first().json.group_owner }}\n- 人员前+@\n- 人员显示真实名称，而不用@我之类的指代\n- 如果完整对话记录缺失，不允许瞎编乱造\n\n\n## 输出要求\n\n必须使用固定的HTML模板和CSS样式，仅更新内容部分，确保每次生成的页面风格完全一致\n\n### 角色\n\n你是极具审美的前端设计大师，请为我生成一个基于 **Bento Grid** 设计风格的单页HTML网站，内嵌CSS、JS。这个页面将被截图分享，需要特别优化视觉效果和分享体验\n\n### 内容分布\n\n- 主卡片：群聊总结\n- 中型卡片：不同子主题，包括：今日热点、技术分享、核心概念关系图、精彩引用、重要链接与资源、活跃统计、词云\n\n### 内容展示\n\n- 标题使用大号字体，根据所选风格选择适合的字体，言简意赅，避免换行\n- 正文使用易读字体，确保在所选背景上清晰可读\n- **在主大卡片展示核心理念，配色和布局大胆有冲击力，又有杂志版的精致感**\n- 每个卡片应聚焦于单一概念，文字简洁有力，主标题加粗\n- 使用简短的要点而非长段落，便于快速阅读，如无必要，不加句子描述\n- 确保每个卡片内容量适中，避免过于空洞或过度拥挤\n- 除专业名词如Few-shot、NBA等，其他输出内容要求中文\n\n### 布局要求\n\n- 采用动态且无缝的网格布局，确保整个视口区域被高效利用，避免任何缺口或大块空白区域\n- 设计一个主要的大卡片展示核心概念/引言（占据约25-30%的视觉区域）\n- 其余卡片应包含不同的子主题，每个卡片有独特的标题和简短描述，标题简短，避免换行\n- 主卡片宽度固定为100%，高度根据内容自适应但设置最小高度\n- 子主题卡片采用固定的网格系统：\n  - 在桌面端：每行2-3个卡片，宽度比例固定\n  - 在移动端：每行1个卡片，宽度100%\n- 卡片之间的间距应保持一致（建议12-20px），创造整洁有序的视觉效果\n- 为卡片添加相关Fontawesome图标，出现在卡片背景中，非常巧妙的装饰\n- 严格定义卡片尺寸和比例，避免因内容多少导致布局变化\n- 保证所有卡片及其内容完整可见，无任何遮挡、截断或隐藏，确保用户可以轻松浏览和理解全部信息\n- 卡片内部元素采用固定的内边距和间距\n\n### 视觉平衡\n\n- 确保色彩分布均匀，避免某一区域颜色过于集中，避免超过4种以上色系\n- 图标和视觉元素应均匀分布在整个布局中\n- 文本密度应相对均衡，避免某些卡片文字过多而其他过少\n- 使用视觉权重（大小、颜色、对比度）引导用户视线流动\n- 确保卡片之间的视觉连接顺畅，没有明显的断裂\n- 卡片大小应根据内容重要性进行变化，形成视觉层次感\n- 确保每个卡片都有独特的视觉特色，与其他卡片区分开来\n- 卡片形状可以变化（正方形、长方形等），但整体应保持视觉一致性\n\n### 技术要求\n\n- 单个HTML文件，内嵌CSS\n- 使用固定的HTML模板和CSS样式，确保每次生成的页面风格完全一致\n- 使用CSS变量定义所有颜色和尺寸，确保一致性\n- 使用grid-template-areas属性精确定义布局，确保无空隙\n- 使用CSS Grid实现不规则网格布局\n- 确保代码简洁，注释清晰\n- 优化页面以确保在单视口中完整显示，适合截图。实在放不下，往下方延展\n- 页面宽度设置为100%，最大宽度限制为1000px\n- 优先采用纵向布局设计，适合移动端截图和分享\n- 添加媒体查询，确保在移动设备上正确显示\n- 确保页面在不同设备上（PC、手机）都能正确显示和缩放，避免内容被截断或隐藏\n\n### 字体要求\n\n- 标题字体大小：主标题不小于36px，副标题不小于28px，卡片标题不小于22px\n- 正文字体大小：不小于16px，确保在移动端也能清晰阅读\n- 标签和辅助文字：不小于14px\n- 使用相对单位(rem)设置字体大小，以适应不同设备和屏幕尺寸\n- 确保字体在不同设备上清晰可见，避免过小或过大\n\n### 颜色要求\n\n- 页面背景色应与所选风格的背景色一致\n- 卡片背景色应与所选风格的背景色一致\n- 卡片背景应使用与内容相关的颜色，避免单一颜色过饱和\n- 标题颜色应与所选风格的标题颜色一致\n- 正文颜色应与所选风格的正文颜色一致\n- 标签和辅助文字颜色应与所选风格的标签颜色一致\n- 确保颜色对比度足够高，避免颜色过饱和或过淡\n- 避免使用单一颜色，确保颜色分布均匀\n- 避免使用过多颜色，保持颜色数量在3-4种以内\n\n### 其他要求\n\n- 不要使用任何侧边装饰线或边框强调线\n- 卡片边框应该是完整的或完全没有，避免单侧边框装饰\n- 视觉分隔应通过卡片背景色、间距或阴影实现，而非边框线条\n- 如需强调，请使用背景色、字体粗细或图标，而非装饰线条\n- 文字和背景对比一定要清晰，可读性高\n- 注意：不要让设计风格影响内容生成和意思传递\n\n### 内嵌资源\n\n- Tailwind CSS (https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/tailwindcss/2.2.19/tailwind.min.css)\n- Font Awesome (https://lf6-cdn-tos.bytecdntp.com/cdn/expire-100-M/font-awesome/6.0.0/css/all.min.css)\n- 中文排版使用 SF Pro Display 和 Segoe UI\n- 根据所选风格添加适合的Google Fonts字体\n\n### 设计风格参考\n\n我提供了多种设计风格选项，请根据我选择的风格编号或名称来设计：\n\n1. 极简主义风格 (Minimalist)：简约、留白、精确排版、无衬线字体、克制装饰、白色背景，橘色字体\n2. 大胆现代风格 (Bold Modern)：鲜艳对比色、不对称动态排版、极大标题、几何元素\n3. 优雅复古风格 (Elegant Vintage)：米色背景、衬线字体、对称排版、精致装饰元素\n4. 未来科技风格 (Futuristic Tech)：深色背景、霓虹色、科技界面、数据可视化元素\n5. 斯堪的纳维亚风格 (Scandinavian)：纯白背景、北欧色调、克制排版、简单几何图案\n6. 艺术装饰风格 (Art Deco)：黑金配色、对称排版、装饰性字体、几何图案、奢华感\n7. 日式极简风格 (Japanese Minimalism)：极度留白、克制色彩、非对称排版、禅意美学\n8. 后现代解构风格 (Postmodern Deconstruction)：打破规则、混合字体、不和谐色彩\n9. 朋克风格 (Punk)：DIY效果、高对比色彩、不规则排版、手写字体、粗糙质感\n10. 英伦摇滚风格 (British Rock)：英国元素、红白蓝色系、混合经典与现代字体\n11. 黑金属风格 (Black Metal)：纯黑背景、哥特字体、神秘符号、高对比单色图像\n12. 孟菲斯风格 (Memphis Design)：鲜艳不协调色彩、几何形状、活泼排版、80年代感\n13. 赛博朋克风格 (Cyberpunk)：深色背景、霓虹色彩、故障效果、科技界面元素\n14. 波普艺术风格 (Pop Art)：亮丽原色、漫画风格、半调网点效果、流行文化元素\n15. 瑞士国际主义风格的解构版 (Deconstructed Swiss Style)：基于网格的破坏重组\n16. 蒸汽波美学 (Vaporwave Aesthetics)：粉紫青蓝渐变、80-90年代元素、复古电脑界面\n17. 新表现主义风格 (Neo-Expressionism)：强烈色彩、不规则排版、粗犷线条、手工感\n18. 极简主义的极端版本 (Extreme Minimalism)：极度留白、黑白灰、精确排版、零装饰\n19. 新未来主义 (Neo-Futurism)：流线型曲线、金属色调、高科技材质、动态排版\n20. 超现实主义数字拼贴 (Surrealist Digital Collage)：意外元素组合、比例失调、梦幻色彩\n21. 新巴洛克数字风格 (Neo-Baroque Digital)：华丽装饰、金色深色系、戏剧性光影效果\n22. 液态数字形态主义 (Liquid Digital Morphism)：流体渐变、液态效果、梦幻色彩\n23. 超感官极简主义 (Hypersensory Minimalism)：微妙纹理、精确排版、细微色彩变化\n24. 新表现主义数据可视化 (Neo-Expressionist Data Visualization)：数据驱动的抽象艺术\n25. 维多利亚风格 (Victorian Style)：华丽印刷美学、繁复装饰边框、传统排版\n26. 包豪斯风格 (Bauhaus)：基本几何形状、原色、无衬线字体、功能主义美学\n27. 构成主义风格 (Constructivism)：几何形状、红黑配色、动态排版、革命美学\n28. 简约功能型风格 (Minimal Functional)：清晰卡片式布局、柔和色彩点缀、直观图标系统、精简文本展示、充足留白空间\n29. 德国表现主义风格 (German Expressionism)：强烈明暗对比、扭曲形态、情感表达\n\n如果我没有指定风格，请默认使用极简主义的 Bento Grid 风格设计\n\n## 重要说明\n\n### HTML模板处理要求\n1. **严格使用提供的HTML模板**\n2. **保持模板结构完整**：不要修改HTML的基础结构、CSS样式和JavaScript功能\n3. **保持响应式设计**：确保生成的HTML在各种设备上都能正确显示\n4. 聊天记录基于json: {{ JSON.stringify($json) }}\n5. html模版文件: {{ $('ConfigureChatParameters').first().json.web_style_template }}\n\n## 🚨 FINAL REMINDER 🚨\n\n**ONLY OUTPUT HTML CODE! NO EXPLANATIONS!**\nStart with: <!DOCTYPE html>\nEnd with: </html>\n\nDo NOT add any text before or after the HTML code!\nDo NOT keep any [xxx] placeholders in the output!"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1880,
        80
      ],
      "id": "d3fa5a68-2275-48ab-88e4-a051bc108360",
      "name": "HTMLPageRender"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash-preview-05-20",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1860,
        300
      ],
      "id": "10e8be12-0703-4650-b309-1c0155edb6e0",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "bHdt5ajnvncNoWyi",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        1200,
        400
      ],
      "id": "b2b9ebcc-7c68-4a47-9797-6551c15fbac9",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "1aMhrjZRlOusowUR",
          "name": "DeepSeek account"
        }
      }
    },
    {
      "parameters": {
        "content": "## 智能微信群聊日报生成器 - 成本优化版\n\n### 📔 基本信息\n\n*   **工作流名称**: WeChat-Daily-Digest-AI-Cost-Optimized\n*   **版本**: v1.0\n*   **创建者**: 林月半子聊AI\n*   **核心亮点**: 采用高性价比大模型，大幅降低单次运行成本\n*   **成本节省方案提供**: 不倒翁先生\n*   **微信**: cloud-native-101\n*   **公众号**: 林月半子的AI笔记\n\n---\n\n### 🚀 功能概述\n\n此工作流是原版“智能微信群聊日报生成器”的 成本优化版。\n\n在完整保留核心功能（自动获取微信群聊记录、通过AI智能分析并生成精美的HTML格式日报）的基础上，对AI调用流程和模型选择进行了深度优化。旨在以极低的成本实现高质量的群聊分析报告，特别适合需要高频运行或大规模部署的场景。\n\n---\n\n### ⚙️ 配置说明\n1.  **配置群聊参数节点**:\n    *   `替换群聊名称`: 设置您需要分析的目标群聊。\n    *   `确认报告日期`: 默认自动设置为前一天。\n    *   `调整模板`: 可根据需求修改生成日报的提示词模板。\n2.  **配置AI模型凭据**:\n    *   工作流已预设为使用成本效益更高的大模型。\n    *   请确保已在n8n中配置了对应模型的凭据。\n",
        "height": 1080,
        "width": 1040
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1120,
        -540
      ],
      "id": "d4429c3b-c681-4468-8fc3-c4dcdc28e34d",
      "name": "Sticky Note4"
    }
  ],
  "pinData": {},
  "connections": {
    "Run every day at 8am": {
      "main": [
        [
          {
            "node": "ConfigureChatParameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Yesterday's Chatlog": {
      "main": [
        [
          {
            "node": "Parse & Structure Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Structure Data": {
      "main": [
        [
          {
            "node": "Extract Links & Active Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean & Segment by Time": {
      "main": [
        [
          {
            "node": "Split in Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split in Batches": {
      "main": [
        [
          {
            "node": "Extract Topics (Low Cost AI)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge & Deduplicate Topics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Extract Topics (Low Cost AI)",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Extract Topics (Low Cost AI)": {
      "main": [
        [
          {
            "node": "Split in Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge & Deduplicate Topics": {
      "main": [
        [
          {
            "node": "AI Semantic Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Semantic Merge",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Semantic Merge": {
      "main": [
        [
          {
            "node": "Assemble Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assemble Final Report": {
      "main": [
        [
          {
            "node": "HTMLPageRender",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "处理AI输出": {
      "main": [
        [
          {
            "node": "SaveHTMLFile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Links & Active Users": {
      "main": [
        [
          {
            "node": "Prepare Raw Message Sample",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Raw Message Sample": {
      "main": [
        [
          {
            "node": "Clean & Segment by Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ConfigureChatParameters": {
      "main": [
        [
          {
            "node": "Fetch Yesterday's Chatlog",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTMLPageRender": {
      "main": [
        [
          {
            "node": "处理AI输出",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "HTMLPageRender",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Extract Topics (Low Cost AI)",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Semantic Merge",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "be8acdce-12cf-475a-acb5-34993e1b7d7e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1bcceb694542a87d03dcbfc74b010fcbb893175a18a9dab6ba2e57e028f57403"
  },
  "id": "UcJbkvRZRPclvh2W",
  "tags": []
}